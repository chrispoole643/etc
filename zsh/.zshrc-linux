# -*- mode: shell-script -*-
################################################################################
#### zsh settings for linux
#### ======================
#### 
################################################################################


################################################################################
### Paths and environment
################################################################################


export PATH="/home/chrispoole/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin"


################################################################################
### Functions and aliases
################################################################################


alias open=gnome-open

## gpg

cjp_gpg_key=1DE85A0C

_start-gpg-agent () {
    time=${1:-'1200'}                # 1200 seconds, 20 minutes
    eval $(gpg-agent -q --daemon --write-env-file "$HOME/.gpg-agent-info" \
        --default-cache-ttl "$time" \
        --max-cache-ttl 86400)      # 24 hours
    source "$HOME/.zshrc"           # Update environment variables
}

kill-gpg-agent () {
    printf "Killing gpg agents... "
    killall gpg-agent
    ps aux | grep -i gpg | grep -v grep
    printf "done.\n"
}

inform-emacs-gpg-agent () {
    agent_id=$(env | grep GPG_AGENT_INFO | awk -F '=' '{print $2}')
    emacsclient -e "(setenv \"GPG_AGENT_INFO\" \"$agent_id\")"
}

start-gpg-agent () {
    time=${1:-'20'}             # Request key cache time in minutes
    time_sec=$(($time * 60))
    _start-gpg-agent "$time_sec" && inform-emacs-gpg-agent
    starter_file="/tmp/gpg-agent-starter"
    sig_starter_file="$starter_file.gpg"
    gpg_key=${1:-"$cjp_gpg_key"}
    touch "$starter_file"
    if [[ -f "$sig_starter_file" ]]; then
        rm "$sig_starter_file"
    fi
    gpg -esr "$gpg_key" -o "$sig_starter_file" "$starter_file"
    if [[ -f "$starter_file" ]]; then
        rm "$starter_file"
    fi
    gpg -d -o "$starter_file" "$sig_starter_file"
    if [[ -f "$starter_file" ]]; then
        rm "$starter_file"
    fi
    if [[ -f "$sig_starter_file" ]]; then
        rm "$sig_starter_file"
    fi
}

# ## Pacman aliases

# # sudo pacman -Syu by typing pacup (sudo must be installed and configured first)
# alias pacup="sudo pacman -Syu"

# # sudo pacman -S by typing pac
# alias pac="sudo pacman -S"

# alias pacrem="sudo pacman -Rsn"

# alias pacinfo="pacman -Si"

# alias pacclean="sudo pacman -Sc"

# ## Yaourt aliases

# # sudo yaourt -S by typing yrt
# alias yac="yaourt -S --aur"

# alias yacrem="yaourt -Rsn --aur"

# alias yacinfo="yaourt -Si --aur"

# alias yacup="yaourt -Syu --aur"

# pacstore () {
#     pacman -Qqe | grep -v "$(pacman -Qmq)" >| ~/Documents/Reference/pkglist-arch
# }

# # also quite useful
# pacsearch () {
# 		echo "Local packages:"
# 		pacman -Qs "$1"
# 		echo "Remote packages:"
# 		pacman -Ss "$1"
# }

# # also quite useful
# yacsearch () {
#     echo "Local packages:"
#     yaourt --aur -Qs $1
#     echo "Remote packages:"
#     yaourt --aur -Ss $1
# }


################################################################################
### Final setup
################################################################################


## fasd

eval "$(fasd --init auto)"

# Defaults
alias f='fasd -f'        # file
alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection

alias j='fasd_cd -id'
alias ji='fasd_cd -id'
alias o='fasd -ife gnome-open'
alias od='fasd -ide gnome-open'
alias oi='fasd -iae gnome-open'

## Prompt

source ~/.zsh-prompts/prompt_chris1_setup
