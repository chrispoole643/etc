This is orgguide.info, produced by makeinfo version 4.8 from
orgguide.texi.

   Copyright (C) 2010 Free Software Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org Mode Guide: (orgguide).  Abbreviated Org-mode Manual
END-INFO-DIR-ENTRY


File: orgguide.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Org Mode Guide
**************

Copyright (C) 2010 Free Software Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

* Menu:

* Introduction::		Getting started
* Document Structure::		A tree works like your brain
* Tables::			Pure magic for quick formatting
* Hyperlinks::			Notes in context
* TODO Items::			Every tree branch can be a TODO item
* Tags::			Tagging headlines and matching sets of tags
* Properties::			Properties
* Dates and Times::		Making items useful for planning
* Capture - Refile - Archive::	The ins and outs for projects
* Agenda Views::		Collecting information into views
* Markup::			Prepare text for rich export
* Exporting::			Sharing and publishing of notes
* Publishing::			Create a web site of linked Org files
* Working With Source Code::	Source code snippets embedded in Org
* Miscellaneous::		All the rest which did not fit elsewhere

 --- The Detailed Node Listing ---

Introduction

* Preface::			Welcome
* Installation::		How to install a downloaded version of Org
* Activation::			How to activate Org for certain buffers
* Feedback::			Bug reports, ideas, patches etc.

Document Structure

* Outlines::			Org is based on Outline mode
* Headlines::			How to typeset Org tree headlines
* Visibility cycling::		Show and hide, much simplified
* Motion::			Jumping to other headlines
* Structure editing::		Changing sequence and level of headlines
* Sparse trees::		Matches embedded in context
* Plain lists::			Additional structure within an entry
* Footnotes::			How footnotes are defined in Org's syntax

Hyperlinks

* Link format::			How links in Org are formatted
* Internal links::		Links to other places in the current file
* External links::		URL-like links to the world
* Handling links::		Creating, inserting and following
* Targeted links::		Point at a location in a file

TODO Items

* Using TODO states::		Setting and switching states
* Multi-state workflows::	More than just on/off
* Progress logging::		Dates and notes for progress
* Priorities::			Some things are more important than others
* Breaking down tasks::		Splitting a task into manageable pieces
* Checkboxes::			Tick-off lists

Progress logging

* Closing items::		When was this entry marked DONE?
* Tracking TODO state changes::	 When did the status change?

Tags

* Tag inheritance::		Tags use the tree structure of the outline
* Setting tags::		How to assign tags to a headline
* Tag searches::		Searching for combinations of tags

Dates and Times

* Timestamps::			Assigning a time to a tree entry
* Creating timestamps::		Commands which insert timestamps
* Deadlines and scheduling::	Planning your work
* Clocking work time::		Tracking how long you spend on a task

Capture - Refile - Archive

* Capture::
* Refiling notes::		Moving a tree from one place to another
* Archiving::			What to do with finished projects

Capture

* Setting up a capture location::  Where notes will be stored
* Using capture::		Commands to invoke and terminate capture
* Capture templates::		Define the outline of different note types

Agenda Views

* Agenda files::		Files being searched for agenda information
* Agenda dispatcher::		Keyboard access to agenda views
* Built-in agenda views::	What is available out of the box?
* Agenda commands::		Remote editing of Org trees
* Custom agenda views::		Defining special searches and views

The built-in agenda views

* Weekly/daily agenda::		The calendar page with current tasks
* Global TODO list::		All unfinished action items
* Matching tags and properties::  Structured information with fine-tuned search
* Timeline::			Time-sorted view for single file
* Search view::			Find entries by searching for text

Markup for rich export

* Structural markup elements::	The basic structure as seen by the exporter
* Images and tables::		Tables and Images will be included
* Literal examples::		Source code examples with special formatting
* Include files::		Include additional files into a document
* Embedded LaTeX::		LaTeX can be freely used inside Org documents

Structural markup elements

* Document title::		Where the title is taken from
* Headings and sections::	The document structure as seen by the exporter
* Table of contents::		The if and where of the table of contents
* Paragraphs::			Paragraphs
* Emphasis and monospace::	Bold, italic, etc.
* Comment lines::		What will *not* be exported

Exporting

* Export options::		Per-file export settings
* The export dispatcher::	How to access exporter commands
* ASCII/Latin-1/UTF-8 export::	Exporting to flat files with encoding
* HTML export::			Exporting to HTML
* LaTeX and PDF export::	Exporting to LaTeX, and processing to PDF
* DocBook export::		Exporting to DocBook
* iCalendar export::

Miscellaneous

* Completion::			M-TAB knows what you need
* Clean view::			Getting rid of leading stars in the outline
* MobileOrg::			Org-mode on the iPhone


File: orgguide.info,  Node: Introduction,  Next: Document Structure,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Preface::			Welcome
* Installation::		How to install a downloaded version of Org
* Activation::			How to activate Org for certain buffers
* Feedback::			Bug reports, ideas, patches etc.


File: orgguide.info,  Node: Preface,  Next: Installation,  Prev: Introduction,  Up: Introduction

1.1 Preface
===========

Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.  It is
also an authoring and publishing system.

   This document is a much compressed derivative of the comprehensive
Org-mode manual (http://orgmode.org/index.html#sec-4_1).  It contains
all basic features and commands, along with important hints for
customization.  It is intended for beginners who would shy back from a
200 page manual because of sheer size.


File: orgguide.info,  Node: Installation,  Next: Activation,  Prev: Preface,  Up: Introduction

1.2 Installation
================

Important: If you are using a version of Org that is part of the Emacs
distribution or an XEmacs package, please skip this section and go
directly to *Note Activation::.

   If you have downloaded Org from the Web, either as a distribution
`.zip' or `.tar' file, or as a Git archive, it is best to run it
directly from the distribution directory.  You need to add the `lisp'
subdirectories to the Emacs load path.  To do this, add the following
line to `.emacs':

     (setq load-path (cons "~/path/to/orgdir/lisp" load-path))
     (setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))

For speed you should byte-compile the Lisp files with the shell command:

     make

   Then add the following line to `.emacs'.  It is needed so that Emacs
can autoload functions that are located in files not immediately loaded
when Org-mode starts.
     (require 'org-install)


File: orgguide.info,  Node: Activation,  Next: Feedback,  Prev: Installation,  Up: Introduction

1.3 Activation
==============

Add the following lines to your `.emacs' file.  The last three lines
define _global_ keys for some commands -- please choose suitable keys
yourself.

     ;; The following lines are always needed.  Choose your own keys.
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
     (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)

   With this setup, all files with extension `.org' will be put into
Org mode.


File: orgguide.info,  Node: Feedback,  Prev: Activation,  Up: Introduction

1.4 Feedback
============

If you find problems with Org, or if you have questions, remarks, or
ideas about it, please mail to the Org mailing list
<emacs-orgmode@gnu.org>.  For information on how to submit bug reports,
see the main manual.


File: orgguide.info,  Node: Document Structure,  Next: Tables,  Prev: Introduction,  Up: Top

2 Document Structure
********************

Org is based on Outline mode and provides flexible commands to edit the
structure of the document.

* Menu:

* Outlines::			Org is based on Outline mode
* Headlines::			How to typeset Org tree headlines
* Visibility cycling::		Show and hide, much simplified
* Motion::			Jumping to other headlines
* Structure editing::		Changing sequence and level of headlines
* Sparse trees::		Matches embedded in context
* Plain lists::			Additional structure within an entry
* Footnotes::			How footnotes are defined in Org's syntax


File: orgguide.info,  Node: Outlines,  Next: Headlines,  Prev: Document Structure,  Up: Document Structure

2.1 Outlines
============

Org is implemented on top of Outline mode.  Outlines allow a document
to be organized in a hierarchical structure, which (at least for me) is
the best representation of notes and thoughts.  An overview of this
structure is achieved by folding (hiding) large parts of the document
to show only the general document structure and the parts currently
being worked on.  Org greatly simplifies the use of outlines by
compressing the entire show/hide functionality into a single command,
`org-cycle', which is bound to the <TAB> key.


File: orgguide.info,  Node: Headlines,  Next: Visibility cycling,  Prev: Outlines,  Up: Document Structure

2.2 Headlines
=============

Headlines define the structure of an outline tree.  The headlines in
Org start with one or more stars, on the left margin(1).  For example:

     * Top level headline
     ** Second level
     *** 3rd level
         some text
     *** 3rd level
         more text

     * Another top level headline

Some people find the many stars too noisy and would prefer an outline
that has whitespace followed by a single star as headline starters.
*Note Clean view::, describes a setup to realize this.

   ---------- Footnotes ----------

   (1) See the variable `org-special-ctrl-a/e' to configure special
behavior of `C-a' and `C-e' in headlines.


File: orgguide.info,  Node: Visibility cycling,  Next: Motion,  Prev: Headlines,  Up: Document Structure

2.3 Visibility cycling
======================

Outlines make it possible to hide parts of the text in the buffer.  Org
uses just two commands, bound to <TAB> and `S-<TAB>' to change the
visibility in the buffer.

`<TAB>'
     _Subtree cycling_: Rotate current subtree among the states

          ,-> FOLDED -> CHILDREN -> SUBTREE --.
          '-----------------------------------'

     When called with a prefix argument (`C-u <TAB>') or with the shift
     key, global cycling is invoked.

`S-<TAB> and C-u <TAB>'
     _Global cycling_: Rotate the entire buffer among the states

          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'

`C-u C-u C-u <TAB>'
     Show all, including drawers.

   When Emacs first visits an Org file, the global state is set to
OVERVIEW, i.e. only the top level headlines are visible.  This can be
configured through the variable `org-startup-folded', or on a per-file
basis by adding a startup keyword `overview', `content', `showall',
like this:

     #+STARTUP: content


File: orgguide.info,  Node: Motion,  Next: Structure editing,  Prev: Visibility cycling,  Up: Document Structure

2.4 Motion
==========

The following commands jump to other headlines in the buffer.

`C-c C-n'
     Next heading.

`C-c C-p'
     Previous heading.

`C-c C-f'
     Next heading same level.

`C-c C-b'
     Previous heading same level.

`C-c C-u'
     Backward to higher level heading.


File: orgguide.info,  Node: Structure editing,  Next: Sparse trees,  Prev: Motion,  Up: Document Structure

2.5 Structure editing
=====================

`M-<RET>'
     Insert new heading with same level as current.  If the cursor is
     in a plain list item, a new item is created (*note Plain lists::).
     When this command is used in the middle of a line, the line is
     split and the rest of the line becomes the new headline(1).

`M-S-<RET>'
     Insert new TODO entry with same level as current heading.

`<TAB> in new, empty entry'
     In a new entry with no text yet, <TAB> will cycle through
     reasonable levels.

`M-<left>/<right>'
     Promote/demote current heading by one level.

`M-S-<left>/<right>'
     Promote/demote the current subtree by one level.

`M-S-<up>/<down>'
     Move subtree up/down (swap with previous/next subtree of same
     level).

`C-c C-w'
     Refile entry or region to a different location.  *Note Refiling
     notes::.

`C-x n s/w'
     Narrow buffer to current subtree / widen it again

   When there is an active region (Transient Mark mode), promotion and
demotion work on all headlines in the region.

   ---------- Footnotes ----------

   (1) If you do not want the line to be split, customize the variable
`org-M-RET-may-split-line'.


File: orgguide.info,  Node: Sparse trees,  Next: Plain lists,  Prev: Structure editing,  Up: Document Structure

2.6 Sparse trees
================

An important feature of Org mode is the ability to construct _sparse
trees_ for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is
made visible along with the headline structure above it(1).  Just try
it out and you will see immediately how it works.

   Org mode contains several commands creating such trees, all these
commands can be accessed through a dispatcher:

`C-c /'
     This prompts for an extra key to select a sparse-tree creating
     command.

`C-c / r'
     Occur.  Prompts for a regexp and shows a sparse tree with all
     matches.  Each match is also highlighted; the highlights disappear
     by pressing `C-c C-c'.

   The other sparse tree commands select headings based on TODO
keywords, tags, or properties and will be discussed later in this
manual.

   ---------- Footnotes ----------

   (1) See also the variables `org-show-hierarchy-above',
`org-show-following-heading', `org-show-siblings', and
`org-show-entry-below' for detailed control on how much context is
shown around each match.


File: orgguide.info,  Node: Plain lists,  Next: Footnotes,  Prev: Sparse trees,  Up: Document Structure

2.7 Plain lists
===============

Within an entry of the outline tree, hand-formatted lists can provide
additional structure.  They also provide a way to create lists of
checkboxes (*note Checkboxes::).  Org supports editing such lists, and
the HTML exporter (*note Exporting::) parses and formats them.

   Org knows ordered lists, unordered lists, and description lists.
   * _Unordered_ list items start with `-', `+', or `*' as bullets.

   * _Ordered_ list items start with `1.' or `1)'.

   * _Description_ list use ` :: ' to separate the _term_ from the
     description.

   Items belonging to the same list must have the same indentation on
the first line.  An item ends before the next line that is indented
like its bullet/number, or less.  A list ends when all items are
closed, or before two blank lines. An example:

     ** Lord of the Rings
        My favorite scenes are (in this order)
        1. The attack of the Rohirrim
        2. Eowyn's fight with the witch king
           + this was already my favorite scene in the book
           + I really like Miranda Otto.
        Important actors in this film are:
        - Elijah Wood :: He plays Frodo
        - Sean Austin :: He plays Sam, Frodo's friend.

   The following commands act on items when the cursor is in the first
line of an item (the line with the bullet or number).

`<TAB>'
     Items can be folded just like headline levels.

`M-<RET>'
     Insert new item at current level.  With a prefix argument, force a
     new heading (*note Structure editing::).

`M-S-<RET>'
     Insert a new item with a checkbox (*note Checkboxes::).

`M-S-<up>/<down>'
     Move the item including subitems up/down (swap with previous/next
     item of same indentation).  If the list is ordered, renumbering is
     automatic.

`M-<left>/M-<right>'
     Decrease/increase the indentation of an item, leaving children
     alone.

`M-S-<left>/<right>'
     Decrease/increase the indentation of the item, including subitems.

`C-c C-c'
     If there is a checkbox (*note Checkboxes::) in the item line,
     toggle the state of the checkbox.  Also verify bullets and
     indentation consistency in the whole list.

`C-c -'
     Cycle the entire list level through the different
     itemize/enumerate bullets (`-', `+', `*', `1.', `1)').


File: orgguide.info,  Node: Footnotes,  Prev: Plain lists,  Up: Document Structure

2.8 Footnotes
=============

A footnote is defined in a paragraph that is started by a footnote
marker in square brackets in column 0, no indentation allowed.  The
footnote reference is simply the marker in square brackets, inside
text.  For example:

     The Org homepage[fn:1] now looks a lot better than it used to.
     ...
     [fn:1] The link is: http://orgmode.org

The following commands handle footnotes:

`C-c C-x f'
     The footnote action command.  When the cursor is on a footnote
     reference, jump to the definition.  When it is at a definition,
     jump to the (first) reference.  Otherwise, create a new footnote.
     When this command is called with a prefix argument, a menu of
     additional options including renumbering is offered.

`C-c C-c'
     Jump between definition and reference.

Further reading
Chapter 2 of the manual
(http://orgmode.org/manual/Document-Structure.html#Document-Structure)
Sacha Chua's tutorial
(http://sachachua.com/wp/2008/01/outlining-your-notes-with-org/)


File: orgguide.info,  Node: Tables,  Next: Hyperlinks,  Prev: Document Structure,  Up: Top

3 Tables
********

Org comes with a fast and intuitive table editor.  Spreadsheet-like
calculations are supported in connection with the Emacs `calc' package
(*note Calc: (Calc)Top.).

   Org makes it easy to format tables in plain ASCII.  Any line with
`|' as the first non-whitespace character is considered part of a
table.  `|' is also the column separator.  A table might look like this:

     | Name  | Phone | Age |
     |-------+-------+-----|
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   A table is re-aligned automatically each time you press <TAB> or
<RET> or `C-c C-c' inside the table.  <TAB> also moves to the next
field (<RET> to the next row) and creates new table rows at the end of
the table or before horizontal lines.  The indentation of the table is
set by the first line.  Any line starting with `|-' is considered as a
horizontal separator line and will be expanded on the next re-align to
span the whole table width.  So, to create the above table, you would
only type

     |Name|Phone|Age|
     |-

and then press <TAB> to align the table and start filling in fields.
Even faster would be to type `|Name|Phone|Age' followed by `C-c <RET>'.

   When typing text into a field, Org treats <DEL>, <Backspace>, and
all character keys in a special way, so that inserting and deleting
avoids shifting other fields.  Also, when typing _immediately after the
cursor was moved into a new field with `<TAB>', `S-<TAB>' or `<RET>'_,
the field is automatically made blank.

Creation and conversion
.......................

`C-c |'
     Convert the active region to table. If every line contains at
     least one TAB character, the function assumes that the material is
     tab separated.  If every line contains a comma, comma-separated
     values (CSV) are assumed.  If not, lines are split at whitespace
     into fields.
     If there is no active region, this command creates an empty Org
     table.  But it's easier just to start typing, like
     `|Name|Phone|Age C-c <RET>'.

Re-aligning and field motion
............................

`C-c C-c'
     Re-align the table without moving the cursor.

`<TAB>'
     Re-align the table, move to the next field.  Creates a new row if
     necessary.

`S-<TAB>'
     Re-align, move to previous field.

`<RET>'
     Re-align the table and move down to next row.  Creates a new row if
     necessary.

Column and row editing
......................

`M-<left>'
`M-<right>'
     Move the current column left/right.

`M-S-<left>'
     Kill the current column.

`M-S-<right>'
     Insert a new column to the left of the cursor position.

`M-<up>'
`M-<down>'
     Move the current row up/down.

`M-S-<up>'
     Kill the current row or horizontal line.

`M-S-<down>'
     Insert a new row above the current row.  With a prefix argument,
     the line is created below the current one.

`C-c -'
     Insert a horizontal line below current row.  With a prefix
     argument, the line is created above the current line.

`C-c <RET>'
     Insert a horizontal line below current row, and move the cursor
     into the row below that line.

`C-c ^'
     Sort the table lines in the region.  The position of point
     indicates the column to be used for sorting, and the range of
     lines is the range between the nearest horizontal separator lines,
     or the entire table.


Further reading
Chapter 3 of the manual (http://orgmode.org/manual/Tables.html#Tables)
Bastien's table tutorial
(http://orgmode.org/worg/org-tutorials/tables.php)
Bastien's spreadsheet tutorial
(http://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.php)
Eric's plotting tutorial
(http://orgmode.org/worg/org-tutorials/org-plot.php)


File: orgguide.info,  Node: Hyperlinks,  Next: TODO Items,  Prev: Tables,  Up: Top

4 Hyperlinks
************

Like HTML, Org provides links inside a file, external links to other
files, Usenet articles, emails, and much more.

* Menu:

* Link format::			How links in Org are formatted
* Internal links::		Links to other places in the current file
* External links::		URL-like links to the world
* Handling links::		Creating, inserting and following
* Targeted links::		Point at a location in a file


File: orgguide.info,  Node: Link format,  Next: Internal links,  Prev: Hyperlinks,  Up: Hyperlinks

4.1 Link format
===============

Org will recognize plain URL-like links and activate them as clickable
links.  The general link format, however, looks like this:

     [[link][description]]       or alternatively           [[link]]

Once a link in the buffer is complete (all brackets present), Org will
change the display so that `description' is displayed instead of
`[[link][description]]' and `link' is displayed instead of `[[link]]'.
To edit the invisible `link' part, use `C-c C-l' with the cursor on the
link.


File: orgguide.info,  Node: Internal links,  Next: External links,  Prev: Link format,  Up: Hyperlinks

4.2 Internal links
==================

If the link does not look like a URL, it is considered to be internal
in the current file.  The most important case is a link like
`[[#my-custom-id]]' which will link to the entry with the `CUSTOM_ID'
property `my-custom-id'.

   Links such as `[[My Target]]' or `[[My Target][Find my target]]'
lead to a text search in the current file for the corresponding target
which looks like `<<My Target>>'.


File: orgguide.info,  Node: External links,  Next: Handling links,  Prev: Internal links,  Up: Hyperlinks

4.3 External links
==================

Org supports links to files, websites, Usenet and email messages, BBDB
database entries and links to both IRC conversations and their logs.
External links are URL-like locators.  They start with a short
identifying string followed by a colon.  There can be no space after
the colon.  Here are some examples:

     http://www.astro.uva.nl/~dominik          on the web
     file:/home/dominik/images/jupiter.jpg     file, absolute path
     /home/dominik/images/jupiter.jpg          same as above
     file:papers/last.pdf                      file, relative path
     file:projects.org                         another Org file
     docview:papers/last.pdf::NNN              open file in doc-view mode at page NNN
     id:B7423F4D-2E8A-471B-8810-C40F074717E9   Link to heading by ID
     news:comp.emacs                           Usenet link
     mailto:adent@galaxy.net                   Mail link
     vm:folder                                 VM folder link
     vm:folder#id                              VM message link
     wl:folder#id                              WANDERLUST message link
     mhe:folder#id                             MH-E message link
     rmail:folder#id                           RMAIL message link
     gnus:group#id                             Gnus article link
     bbdb:R.*Stallman                          BBDB link (with regexp)
     irc:/irc.com/#emacs/bob                   IRC link
     info:org:External%20links                 Info node link (with encoded space)

   A link should be enclosed in double brackets and may contain a
descriptive text to be displayed instead of the URL (*note Link
format::), for example:

     [[http://www.gnu.org/software/emacs/][GNU Emacs]]

If the description is a file name or URL that points to an image, HTML
export (*note HTML export::) will inline the image as a clickable
button.  If there is no description at all and the link points to an
image, that image will be inlined into the exported HTML file.


File: orgguide.info,  Node: Handling links,  Next: Targeted links,  Prev: External links,  Up: Hyperlinks

4.4 Handling links
==================

Org provides methods to create a link in the correct syntax, to insert
it into an Org file, and to follow the link.

`C-c l'
     Store a link to the current location.  This is a _global_ command
     (you must create the key binding yourself) which can be used in
     any buffer to create a link.  The link will be stored for later
     insertion into an Org buffer (see below).

`C-c C-l'
     Insert a link.  This prompts for a link to be inserted into the
     buffer.  You can just type a link, or use history keys <up> and
     <down> to access stored links.  You will be prompted for the
     description part of the link.  When called with a `C-u' prefix
     argument, file name completion is used to link to a file.

`C-c C-l (with cursor on existing link)'
     When the cursor is on an existing link, `C-c C-l' allows you to
     edit the link and description parts of the link.

`C-c C-o or mouse-1 or mouse-2'
     Open link at point.

`C-c &'
     Jump back to a recorded position.  A position is recorded by the
     commands following internal links, and by `C-c %'.  Using this
     command several times in direct succession moves through a ring of
     previously recorded positions.


File: orgguide.info,  Node: Targeted links,  Prev: Handling links,  Up: Hyperlinks

4.5 Targeted links
==================

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link.  This can be a
line number or a search option after a double colon.

   Here is the syntax of the different ways to attach a search to a file
link, together with an explanation:

     [[file:~/code/main.c::255]]                 Find line 255
     [[file:~/xx.org::My Target]]                Find `<<My Target>>'
     [[file:~/xx.org::#my-custom-id]]            Find entry with custom id

Further reading
Chapter 4 of the manual
(http://orgmode.org/manual/Hyperlinks.html#Hyperlinks)


File: orgguide.info,  Node: TODO Items,  Next: Tags,  Prev: Hyperlinks,  Up: Top

5 TODO Items
************

Org mode does not maintain TODO lists as separate documents(1).
Instead, TODO items are an integral part of the notes file, because
TODO items usually come up while taking notes!  With Org mode, simply
mark any entry in a tree as being a TODO item.  In this way,
information is not duplicated, and the entire context from which the
TODO item emerged is always present.

   Of course, this technique for managing TODO items scatters them
throughout your notes file.  Org mode compensates for this by providing
methods to give you an overview of all the things that you have to do.

* Menu:

* Using TODO states::		Setting and switching states
* Multi-state workflows::	More than just on/off
* Progress logging::		Dates and notes for progress
* Priorities::			Some things are more important than others
* Breaking down tasks::		Splitting a task into manageable pieces
* Checkboxes::			Tick-off lists

   ---------- Footnotes ----------

   (1) Of course, you can make a document that contains only long lists
of TODO items, but this is not required.


File: orgguide.info,  Node: Using TODO states,  Next: Multi-state workflows,  Prev: TODO Items,  Up: TODO Items

5.1 Using TODO states
=====================

Any headline becomes a TODO item when it starts with the word `TODO',
for example:

     *** TODO Write letter to Sam Fortune

The most important commands to work with TODO entries are:

`C-c C-t'
     Rotate the TODO state of the current item among

          ,-> (unmarked) -> TODO -> DONE --.
          '--------------------------------'

     The same rotation can also be done "remotely" from the timeline and
     agenda buffers with the `t' command key (*note Agenda commands::).

`S-<right>/<left>'
     Select the following/preceding TODO state, similar to cycling.

`C-c / t'
     View TODO items in a _sparse tree_ (*note Sparse trees::).  Folds
     the buffer, but shows all TODO items and the headings hierarchy
     above them.

`C-c a t'
     Show the global TODO list.  Collects the TODO items from all
     agenda files (*note Agenda Views::) into a single buffer.  *Note
     Global TODO list::, for more information.

`S-M-<RET>'
     Insert a new TODO entry below the current one.

Changing a TODO state can also trigger tag changes.  See the docstring
of the option `org-todo-state-tags-triggers' for details.


File: orgguide.info,  Node: Multi-state workflows,  Next: Progress logging,  Prev: Using TODO states,  Up: TODO Items

5.2 Multi-state workflows
=========================

You can use TODO keywords to indicate different _sequential_ states in
the process of working on an item, for example:

     (setq org-todo-keywords
       '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

   The vertical bar separates the TODO keywords (states that _need
action_) from the DONE states (which need _no further action_).  If you
don't provide the separator bar, the last state is used as the DONE
state.  With this setup, the command `C-c C-t' will cycle an entry from
TODO to FEEDBACK, then to VERIFY, and finally to DONE and DELEGATED.

   Sometimes you may want to use different sets of TODO keywords in
parallel.  For example, you may want to have the basic `TODO'/`DONE',
but also a workflow for bug fixing, and a separate state indicating
that an item has been canceled (so it is not DONE, but also does not
require action).  Your setup would then look like this:

     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))

   The keywords should all be different, this helps Org mode to keep
track of which subsequence should be used for a given entry.  The
example also shows how to define keys for fast access of a particular
state, by adding a letter in parenthesis after each keyword - you will
be prompted for the key after `C-c C-t'.

   To define TODO keywords that are valid only in a single file, use the
following text anywhere in the file.

     #+TODO: TODO(t) | DONE(d)
     #+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
     #+TODO: | CANCELED(c)

   After changing one of these lines, use `C-c C-c' with the cursor
still in the line to make the changes known to Org mode.


File: orgguide.info,  Node: Progress logging,  Next: Priorities,  Prev: Multi-state workflows,  Up: TODO Items

5.3 Progress logging
====================

Org mode can automatically record a timestamp and possibly a note when
you mark a TODO item as DONE, or even each time you change the state of
a TODO item.  This system is highly configurable, settings can be on a
per-keyword basis and can be localized to a file or even a subtree.  For
information on how to clock working time for a task, see *Note Clocking
work time::.

* Menu:

* Closing items::		When was this entry marked DONE?
* Tracking TODO state changes::	 When did the status change?


File: orgguide.info,  Node: Closing items,  Next: Tracking TODO state changes,  Prev: Progress logging,  Up: Progress logging

Closing items
-------------

The most basic logging is to keep track of _when_ a certain TODO item
was finished.  This is achieved with(1).

     (setq org-log-done 'time)

Then each time you turn an entry from a TODO (not-done) state into any
of the DONE states, a line `CLOSED: [timestamp]' will be inserted just
after the headline.  If you want to record a note along with the
timestamp, use(2)

     (setq org-log-done 'note)

You will then be prompted for a note, and that note will be stored below
the entry with a `Closing Note' heading.

   ---------- Footnotes ----------

   (1) The corresponding in-buffer setting is: `#+STARTUP: logdone'

   (2) The corresponding in-buffer setting is: `#+STARTUP: lognotedone'


File: orgguide.info,  Node: Tracking TODO state changes,  Prev: Closing items,  Up: Progress logging

Tracking TODO state changes
---------------------------

You might want to keep track of TODO state changes.  You can either
record just a timestamp, or a time-stamped note for a change.  These
records will be inserted after the headline as an itemized list.  When
taking a lot of notes, you might want to get the notes out of the way
into a drawer.  Customize the variable `org-log-into-drawer' to get
this behavior.

   For state logging, Org mode expects configuration on a per-keyword
basis.  This is achieved by adding special markers `!' (for a
timestamp) and `@' (for a note) in parentheses after each keyword.  For
example:
     #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
   will define TODO keywords and fast access keys, and also request
that a time is recorded when the entry is set to DONE, and that a note
is recorded when switching to WAIT or CANCELED.  The same syntax works
also when setting `org-todo-keywords'.


File: orgguide.info,  Node: Priorities,  Next: Breaking down tasks,  Prev: Progress logging,  Up: TODO Items

5.4 Priorities
==============

If you use Org mode extensively, you may end up with enough TODO items
that it starts to make sense to prioritize them.  Prioritizing can be
done by placing a _priority cookie_ into the headline of a TODO item,
like this

     *** TODO [#A] Write letter to Sam Fortune

Org mode supports three priorities: `A', `B', and `C'.  `A' is the
highest, `B' the default if none is given.  Priorities make a
difference only in the agenda.

`C-c ,'
     Set the priority of the current headline.  Press `A', `B' or `C'
     to select a priority, or <SPC> to remove the cookie.

`S-<up>'
`S-<down>'
     Increase/decrease priority of current headline


File: orgguide.info,  Node: Breaking down tasks,  Next: Checkboxes,  Prev: Priorities,  Up: TODO Items

5.5 Breaking tasks down into subtasks
=====================================

It is often advisable to break down large tasks into smaller, manageable
subtasks.  You can do this by creating an outline tree below a TODO
item, with detailed subtasks on the tree.  To keep the overview over
the fraction of subtasks that are already completed, insert either
`[/]' or `[%]' anywhere in the headline.  These cookies will be updated
each time the TODO status of a child changes, or when pressing `C-c
C-c' on the cookie.  For example:

     * Organize Party [33%]
     ** TODO Call people [1/2]
     *** TODO Peter
     *** DONE Sarah
     ** TODO Buy food
     ** DONE Talk to neighbor


File: orgguide.info,  Node: Checkboxes,  Prev: Breaking down tasks,  Up: TODO Items

5.6 Checkboxes
==============

Every item in a plain list (*note Plain lists::) can be made into a
checkbox by starting it with the string `[ ]'.  Checkboxes are not
included into the global TODO list, so they are often great to split a
task into a number of simple steps.  Here is an example of a checkbox
list.

     * TODO Organize party [1/3]
       - [-] call people [1/2]
         - [ ] Peter
         - [X] Sarah
       - [X] order food
       - [ ] think about what music to play

   Checkboxes work hierarchically, so if a checkbox item has children
that are checkboxes, toggling one of the children checkboxes will make
the parent checkbox reflect if none, some, or all of the children are
checked.

The following commands work with checkboxes:

`C-c C-c'
     Toggle checkbox status or (with prefix arg) checkbox presence at
     point.

`M-S-<RET>'
     Insert a new item with a checkbox.  This works only if the cursor
     is already in a plain list item (*note Plain lists::).

Further reading
Chapter 5 of the manual
(http://orgmode.org/manual/TODO-Items.html#TODO-Items)
David O'Toole's introductory tutorial
(http://orgmode.org/worg/org-tutorials/orgtutorial_dto.php)
Charles Cave's GTD setup
(http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html)


File: orgguide.info,  Node: Tags,  Next: Properties,  Prev: TODO Items,  Up: Top

6 Tags
******

An excellent way to implement labels and contexts for cross-correlating
information is to assign tags to headlines.  Org mode has extensive
support for tags.

   Every headline can contain a list of tags; they occur at the end of
the headline.  Tags are normal words containing letters, numbers, `_',
and `@'.  Tags must be preceded and followed by a single colon, e.g.,
`:work:'.  Several tags can be specified, as in `:work:urgent:'.  Tags
will by default be in bold face with the same color as the headline.

* Menu:

* Tag inheritance::		Tags use the tree structure of the outline
* Setting tags::		How to assign tags to a headline
* Tag searches::		Searching for combinations of tags


File: orgguide.info,  Node: Tag inheritance,  Next: Setting tags,  Prev: Tags,  Up: Tags

6.1 Tag inheritance
===================

Tags make use of the hierarchical structure of outline trees.  If a
heading has a certain tag, all subheadings will inherit the tag as
well.  For example, in the list

     * Meeting with the French group      :work:
     ** Summary by Frank                  :boss:notes:
     *** TODO Prepare slides for him      :action:

the final heading will have the tags `:work:', `:boss:', `:notes:', and
`:action:' even though the final heading is not explicitly marked with
those tags.  You can also set tags that all entries in a file should
inherit just as if these tags were defined in a hypothetical level zero
that surrounds the entire file.  Use a line like this(1):

     #+FILETAGS: :Peter:Boss:Secret:

   ---------- Footnotes ----------

   (1) As with all these in-buffer settings, pressing `C-c C-c'
activates any changes in the line.


File: orgguide.info,  Node: Setting tags,  Next: Tag searches,  Prev: Tag inheritance,  Up: Tags

6.2 Setting tags
================

Tags can simply be typed into the buffer at the end of a headline.
After a colon, `M-<TAB>' offers completion on tags.  There is also a
special command for inserting tags:

`C-c C-q'
     Enter new tags for the current headline.  Org mode will either
     offer completion or a special single-key interface for setting
     tags, see below.  After pressing <RET>, the tags will be inserted
     and aligned to `org-tags-column'.  When called with a `C-u'
     prefix, all tags in the current buffer will be aligned to that
     column, just to make things look nice.

`C-c C-c'
     When the cursor is in a headline, this does the same as `C-c C-q'.

   Org will support tag insertion based on a _list of tags_.  By
default this list is constructed dynamically, containing all tags
currently used in the buffer.  You may also globally specify a hard list
of tags with the variable `org-tag-alist'.  Finally you can set the
default tags for a given file with lines like

     #+TAGS: @work @home @tennisclub
     #+TAGS: laptop car pc sailboat

   By default Org mode uses the standard minibuffer completion
facilities for entering tags.  However, it also implements another,
quicker, tag selection method called _fast tag selection_.  This allows
you to select and deselect tags with just a single key press.  For this
to work well you should assign unique letters to most of your commonly
used tags.  You can do this globally by configuring the variable
`org-tag-alist' in your `.emacs' file.  For example, you may find the
need to tag many items in different files with `:@home:'.  In this case
you can set something like:

     (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

If the tag is only relevant to the file you are working on, then you
can instead set the TAGS option line as:

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)


File: orgguide.info,  Node: Tag searches,  Prev: Setting tags,  Up: Tags

6.3 Tag searches
================

Once a system of tags has been set up, it can be used to collect related
information into special lists.

`C-c \'
`C-c / m'
     Create a sparse tree with all headlines matching a tags search.
     With a `C-u' prefix argument, ignore headlines that are not a TODO
     line.

`C-c a m'
     Create a global list of tag matches from all agenda files.  *Note
     Matching tags and properties::.

`C-c a M'
     Create a global list of tag matches from all agenda files, but
     check only TODO items and force checking subitems (see variable
     `org-tags-match-list-sublevels').

   These commands all prompt for a match string which allows basic
Boolean logic like `+boss+urgent-project1', to find entries with tags
`boss' and `urgent', but not `project1', or `Kathy|Sally' to find
entries which are tagged, like `Kathy' or `Sally'.  The full syntax of
the search string is rich and allows also matching against TODO
keywords, entry levels and properties.  For a complete description with
many examples, see *Note Matching tags and properties::.

Further reading
Chapter 6 of the manual (http://orgmode.org/manual/Tags.html#Tags)
Sacha Chua's article about tagging in Org-mode
(http://sachachua.com/wp/2008/01/tagging-in-org-plus-bonus-code-for-timeclocks-and-tags/)


File: orgguide.info,  Node: Properties,  Next: Dates and Times,  Prev: Tags,  Up: Top

7 Properties
************

Properties are key-value pairs associates with and entry.  They live in
a special drawer with the name `PROPERTIES'.  Each property is
specified on a single line, with the key (surrounded by colons) first,
and the value after it:

     * CD collection
     ** Classic
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :END:

   You may define the allowed values for a particular property `:Xyz:'
by setting a property `:Xyz_ALL:'.  This special property is
_inherited_, so if you set it in a level 1 entry, it will apply to the
entire tree.  When allowed values are defined, setting the
corresponding property becomes easier and is less prone to typing
errors.  For the example with the CD collection, we can predefine
publishers and the number of disks in a box like this:

     * CD collection
       :PROPERTIES:
       :NDisks_ALL:  1 2 3 4
       :Publisher_ALL: "Deutsche Grammophon" Philips EMI
       :END:
   or globally using `org-global-properties', or file-wide like this:
     #+PROPERTY: NDisks_ALL 1 2 3 4

`C-c C-x p'
     Set a property.  This prompts for a property name and a value.

`C-c C-c d'
     Remove a property from the current entry.

   To create sparse trees and special lists with selection based on
properties, the same commands are used as for tag searches (*note Tag
searches::).  The syntax for the search string is described in *Note
Matching tags and properties::.


Further reading
Chapter 7 of the manual
(http://orgmode.org/manual/Properties-and-Columns.html#Properties-and-Columns)
Bastien Guerry's column view tutorial
(http://orgmode.org/worg/org-tutorials/org-column-view-tutorial.php)


File: orgguide.info,  Node: Dates and Times,  Next: Capture - Refile - Archive,  Prev: Properties,  Up: Top

8 Dates and Times
*****************

To assist project planning, TODO items can be labeled with a date and/or
a time.  The specially formatted string carrying the date and time
information is called a _timestamp_ in Org mode.

* Menu:

* Timestamps::			Assigning a time to a tree entry
* Creating timestamps::		Commands which insert timestamps
* Deadlines and scheduling::	Planning your work
* Clocking work time::		Tracking how long you spend on a task


File: orgguide.info,  Node: Timestamps,  Next: Creating timestamps,  Prev: Dates and Times,  Up: Dates and Times

8.1 Timestamps
==============

A timestamp is a specification of a date (possibly with a time or a
range of times) in a special format, either `<2003-09-16 Tue>' or
`<2003-09-16 Tue 09:39>' or `<2003-09-16 Tue 12:00-12:30>'.  A
timestamp can appear anywhere in the headline or body of an Org tree
entry.  Its presence causes entries to be shown on specific dates in
the agenda (*note Weekly/daily agenda::).  We distinguish:

Plain timestamp; Event; Appointment
A simple timestamp just assigns a date/time to an item.  This is just
like writing down an appointment or event in a paper agenda.

     * Meet Peter at the movies <2006-11-01 Wed 19:15>
     * Discussion on climate change <2006-11-02 Thu 20:00-22:00>

Timestamp with repeater interval
A timestamp may contain a _repeater interval_, indicating that it
applies not only on the given date, but again and again after a certain
interval of N days (d), weeks (w), months (m), or years (y).  The
following will show up in the agenda every Wednesday:
     * Pick up Sam at school <2007-05-16 Wed 12:30 +1w>

Diary-style sexp entries
For more complex date specifications, Org mode supports using the
special sexp diary entries implemented in the Emacs calendar/diary
package.  For example
     * The nerd meeting on every 2nd Thursday of the month
       <%%(diary-float t 4 2)>

Time/Date range
Two timestamps connected by `--' denote a range.
     ** Meeting in Amsterdam
        <2004-08-23 Mon>--<2004-08-26 Thu>

Inactive timestamp
Just like a plain timestamp, but with square brackets instead of
angular ones.  These timestamps are inactive in the sense that they do
_not_ trigger an entry to show up in the agenda.

     * Gillian comes late for the fifth time [2006-11-01 Wed]


File: orgguide.info,  Node: Creating timestamps,  Next: Deadlines and scheduling,  Prev: Timestamps,  Up: Dates and Times

8.2 Creating timestamps
=======================

For Org mode to recognize timestamps, they need to be in the specific
format.  All commands listed below produce timestamps in the correct
format.

`C-c .'
     Prompt for a date and insert a corresponding timestamp.  When the
     cursor is at an existing timestamp in the buffer, the command is
     used to modify this timestamp instead of inserting a new one.
     When this command is used twice in succession, a time range is
     inserted.  With a prefix, also add the current time.

`C-c !'
     Like `C-c .', but insert an inactive timestamp that will not cause
     an agenda entry.

`S-<left>/<right>'
     Change date at cursor by one day.

`S-<up>/<down>'
     Change the item under the cursor in a timestamp.  The cursor can
     be on a year, month, day, hour or minute.  When the timestamp
     contains a time range like `15:30-16:30', modifying the first time
     will also shift the second, shifting the time block with constant
     length.  To change the length, modify the second time.

   When Org mode prompts for a date/time, it will accept any string
containing some date and/or time information, and intelligently
interpret the string, deriving defaults for unspecified information
from the current date and time.  You can also select a date in the
pop-up calendar.  See the manual for more information on how exactly
the date/time prompt works.


File: orgguide.info,  Node: Deadlines and scheduling,  Next: Clocking work time,  Prev: Creating timestamps,  Up: Dates and Times

8.3 Deadlines and scheduling
============================

A timestamp may be preceded by special keywords to facilitate planning:

DEADLINE
Meaning: the task (most likely a TODO item, though not necessarily) is
supposed to be finished on that date.
`C-c C-d'
     Insert `DEADLINE' keyword along with a stamp, in the line
     following the headline.

   On the deadline date, the task will be listed in the agenda.  In
addition, the agenda for _today_ will carry a warning about the
approaching or missed deadline, starting `org-deadline-warning-days'
before the due date, and continuing until the entry is marked DONE.  An
example:

     *** TODO write article about the Earth for the Guide
         The editor in charge is [[bbdb:Ford Prefect]]
         DEADLINE: <2004-02-29 Sun>

SCHEDULED
Meaning: you are planning to start working on that task on the given
date(1).

`C-c C-s'
     Insert `SCHEDULED' keyword along with a stamp, in the line
     following the headline.

   The headline will be listed under the given date(2).  In addition, a
reminder that the scheduled date has passed will be present in the
compilation for _today_, until the entry is marked DONE.  I.e. the task
will automatically be forwarded until completed.

     *** TODO Call Trillian for a date on New Years Eve.
         SCHEDULED: <2004-12-25 Sat>

   Some tasks need to be repeated again and again.  Org mode helps to
organize such tasks using a so-called repeater in a DEADLINE, SCHEDULED,
or plain timestamp.  In the following example
     ** TODO Pay the rent
        DEADLINE: <2005-10-01 Sat +1m>
   the `+1m' is a repeater; the intended interpretation is that the task
has a deadline on <2005-10-01> and repeats itself every (one) month
starting from that time.

   ---------- Footnotes ----------

   (1) This is quite different from what is normally understood by
scheduling a meeting, which is done in Org-mode by just inserting a time
stamp without keyword.

   (2) It will still be listed on that date after it has been marked
DONE.  If you don't like this, set the variable
`org-agenda-skip-scheduled-if-done'.


File: orgguide.info,  Node: Clocking work time,  Prev: Deadlines and scheduling,  Up: Dates and Times

8.4 Clocking work time
======================

Org mode allows you to clock the time you spend on specific tasks in a
project.

`C-c C-x C-i'
     Start the clock on the current item (clock-in).  This inserts the
     CLOCK keyword together with a timestamp.  When called with a `C-u'
     prefix argument, select the task from a list of recently clocked
     tasks.

`C-c C-x C-o'
     Stop the clock (clock-out).  This inserts another timestamp at the
     same location where the clock was last started.  It also directly
     computes the resulting time in inserts it after the time range as
     `=> HH:MM'.

`C-c C-x C-e'
     Update the effort estimate for the current clock task.

`C-c C-x C-x'
     Cancel the current clock.  This is useful if a clock was started by
     mistake, or if you ended up working on something else.

`C-c C-x C-j'
     Jump to the entry that contains the currently running clock.  With
     a `C-u' prefix arg, select the target task from a list of recently
     clocked tasks.

`C-c C-x C-r'
     Insert a dynamic block containing a clock report as an Org-mode
     table into the current file.  When the cursor is at an existing
     clock table, just update it.
          #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
          #+END: clocktable
     For details about how to customize this view, see the manual
     (http://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time).

`C-c C-c'
     Update dynamic block at point.  The cursor needs to be in the
     `#+BEGIN' line of the dynamic block.

   The `l' key may be used in the timeline (*note Timeline::) and in
the agenda (*note Weekly/daily agenda::) to show which tasks have been
worked on or closed during a day.

Further reading
Chapter 8 of the manual
(http://orgmode.org/manual/Dates-and-Times.html#Dates-and-Times)
Charles Cave's Date and Time tutorial
(http://members.optusnet.com.au/~charles57/GTD/org_dates/)
Bernt Hansen's clocking workflow
(http://doc.norang.ca/org-mode.html#Clocking)


File: orgguide.info,  Node: Capture - Refile - Archive,  Next: Agenda Views,  Prev: Dates and Times,  Up: Top

9 Capture - Refile - Archive
****************************

An important part of any organization system is the ability to quickly
capture new ideas and tasks, and to associate reference material with
them.  Org defines a capture process to create tasks.  It stores files
related to a task (attachments) in a special directory.  Once in the
system, tasks and projects need to be moved around.  Moving completed
project trees to an archive file keeps the system compact and fast.

* Menu:

* Capture::
* Refiling notes::		Moving a tree from one place to another
* Archiving::			What to do with finished projects


File: orgguide.info,  Node: Capture,  Next: Refiling notes,  Prev: Capture - Refile - Archive,  Up: Capture - Refile - Archive

9.1 Capture
===========

Org's method for capturing new items is heavily inspired by John Wiegley
excellent remember package.  It lets you store quick notes with little
interruption of your work flow.  Org lets you define templates for new
entries and associate them with different targets for storing notes.

* Menu:

* Setting up a capture location::  Where notes will be stored
* Using capture::		Commands to invoke and terminate capture
* Capture templates::		Define the outline of different note types


File: orgguide.info,  Node: Setting up a capture location,  Next: Using capture,  Prev: Capture,  Up: Capture

Setting up a capture location
-----------------------------

The following customization sets a default target(1) file for notes,
and defines a global key(2) for capturing new stuff.

     (setq org-default-notes-file (concat org-directory "/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)

   ---------- Footnotes ----------

   (1) Using capture templates, you can define more fine-grained
capture locations, see *Note Capture templates::.

   (2) Please select your own key, `C-c c' is only a suggestion.


File: orgguide.info,  Node: Using capture,  Next: Capture templates,  Prev: Setting up a capture location,  Up: Capture

Using capture
-------------

`C-c c'
     Start a capture process.  You will be placed into a narrowed
     indirect buffer to edit the item.

`C-c C-c'
     Once you are done entering information into the capture buffer,
     `C-c C-c' will return you to the window configuration before the
     capture process, so that you can resume your work without further
     distraction.

`C-c C-w'
     Finalize by moving the entry to a refile location (*note Refiling
     notes::).

`C-c C-k'
     Abort the capture process and return to the previous state.


File: orgguide.info,  Node: Capture templates,  Prev: Using capture,  Up: Capture

Capture templates
-----------------

You can use templates to generate different types of capture notes, and
to store them in different places.  For example, if you would like to
store new tasks under a heading `Tasks' in file `TODO.org', and journal
entries in a date tree in `journal.org' you could use:

     (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")))

In these entries, the first string is the key to reach the template,
the second is a short description.  Then follows the type of the entry
and a definition of the target location for storing the note.  Finally,
the template itself, a string with %-escapes to fill in information
based on time and context.

   When you call `M-x org-capture', Org will prompt for a key to select
the template (if you have more than one template) and then prepare the
buffer like
     * TODO
       [[file:LINK TO WHERE YOU WERE WHEN INITIATING CAPTURE]]

During expansion of the template, special `%'-escapes(1) allow dynamic
insertion of content.  Here is a small selection of the possibilities,
consult the manual for more.
     %a          annotation, normally the link created with `org-store-link'
     %i          initial content, the region when remember is called with C-u.
     %t          timestamp, date only
     %T          timestamp with date and time
     %u, %U      like the above, but inactive timestamps

   ---------- Footnotes ----------

   (1) If you need one of these sequences literally, escape the `%'
with a backslash.


File: orgguide.info,  Node: Refiling notes,  Next: Archiving,  Prev: Capture,  Up: Capture - Refile - Archive

9.2 Refiling notes
==================

When reviewing the captured data, you may want to refile some of the
entries into a different list, for example into a project.  Cutting,
finding the right location, and then pasting the note is cumbersome.
To simplify this process, you can use the following special command:

`C-c C-w'
     Refile the entry or region at point.  This command offers possible
     locations for refiling the entry and lets you select one with
     completion.  The item (or all items in the region) is filed below
     the target heading as a subitem.
     By default, all level 1 headlines in the current buffer are
     considered to be targets, but you can have more complex
     definitions across a number of files.  See the variable
     `org-refile-targets' for details.

`C-u C-c C-w'
     Use the refile interface to jump to a heading.

`C-u C-u C-c C-w'
     Jump to the location where `org-refile' last moved a tree to.


File: orgguide.info,  Node: Archiving,  Prev: Refiling notes,  Up: Capture - Refile - Archive

9.3 Archiving
=============

When a project represented by a (sub)tree is finished, you may want to
move the tree out of the way and to stop it from contributing to the
agenda.  Archiving is important to keep your working files compact and
global searches like the construction of agenda views fast.  The most
common archiving action is to move a project tree to another file, the
archive file.

`C-c C-x C-a'
     Archive the current entry using the command specified in the
     variable `org-archive-default-command'.

`C-c C-x C-s or short  C-c $'
     Archive the subtree starting at the cursor position to the location
     given by `org-archive-location'.

   The default archive location is a file in the same directory as the
current file, with the name derived by appending `_archive' to the
current file name.  For information and examples on how to change this,
see the documentation string of the variable `org-archive-location'.
There is also an in-buffer option for setting this variable, for example

     #+ARCHIVE: %s_done::

Further reading
Chapter 9 of the manual
(http://orgmode.org/manual/Capture-_002d-Refile-_002d-Archive.html#Capture-_002d-Refile-_002d-Archive)
Charles Cave's remember tutorial
(http://members.optusnet.com.au/~charles57/GTD/remember.html)
Sebastian Rose's tutorial for capturing from a web browser
(http://orgmode.org/worg/org-tutorials/org-protocol-custom-handler.php)`'

File: orgguide.info,  Node: Agenda Views,  Next: Markup,  Prev: Capture - Refile - Archive,  Up: Top

10 Agenda Views
***************

Due to the way Org works, TODO items, time-stamped items, and tagged
headlines can be scattered throughout a file or even a number of files.
To get an overview of open action items, or of events that are
important for a particular date, this information must be collected,
sorted and displayed in an organized way.  There are several different
views, see below.

   The extracted information is displayed in a special _agenda buffer_.
This buffer is read-only, but provides commands to visit the
corresponding locations in the original Org files, and even to edit
these files remotely.  Remote editing from the agenda buffer means, for
example, that you can change the dates of deadlines and appointments
from the agenda buffer.  The commands available in the Agenda buffer
are listed in *Note Agenda commands::.

* Menu:

* Agenda files::		Files being searched for agenda information
* Agenda dispatcher::		Keyboard access to agenda views
* Built-in agenda views::	What is available out of the box?
* Agenda commands::		Remote editing of Org trees
* Custom agenda views::		Defining special searches and views


File: orgguide.info,  Node: Agenda files,  Next: Agenda dispatcher,  Prev: Agenda Views,  Up: Agenda Views

10.1 Agenda files
=================

The information to be shown is normally collected from all _agenda
files_, the files listed in the variable `org-agenda-files'.

`C-c ['
     Add current file to the list of agenda files.  The file is added to
     the front of the list.  If it was already in the list, it is moved
     to the front.  With a prefix argument, file is added/moved to the
     end.

`C-c ]'
     Remove current file from the list of agenda files.

`C-,'
     Cycle through agenda file list, visiting one file after the other.


File: orgguide.info,  Node: Agenda dispatcher,  Next: Built-in agenda views,  Prev: Agenda files,  Up: Agenda Views

10.2 The agenda dispatcher
==========================

The views are created through a dispatcher, which should be bound to a
global key--for example `C-c a' (*note Installation::).  After pressing
`C-c a', an additional letter is required to execute a command:
`a'
     The calendar-like agenda (*note Weekly/daily agenda::).

`t / T'
     A list of all TODO items (*note Global TODO list::).

`m / M'
     A list of headlines matching a TAGS expression (*note Matching
     tags and properties::).

`L'
     The timeline view for the current buffer (*note Timeline::).

`s'
     A list of entries selected by a boolean expression of keywords
     and/or regular expressions that must or must not occur in the
     entry.


File: orgguide.info,  Node: Built-in agenda views,  Next: Agenda commands,  Prev: Agenda dispatcher,  Up: Agenda Views

10.3 The built-in agenda views
==============================

* Menu:

* Weekly/daily agenda::		The calendar page with current tasks
* Global TODO list::		All unfinished action items
* Matching tags and properties::  Structured information with fine-tuned search
* Timeline::			Time-sorted view for single file
* Search view::			Find entries by searching for text


File: orgguide.info,  Node: Weekly/daily agenda,  Next: Global TODO list,  Prev: Built-in agenda views,  Up: Built-in agenda views

10.3.1 The weekly/daily agenda
------------------------------

The purpose of the weekly/daily _agenda_ is to act like a page of a
paper agenda, showing all the tasks for the current week or day.

`C-c a a'
     Compile an agenda for the current week from a list of Org files.
     The agenda shows the entries for each day.

   Emacs contains the calendar and diary by Edward M. Reingold.
Org-mode understands the syntax of the diary and allows you to use
diary sexp entries directly in Org files:

     * Birthdays and similar stuff
     #+CATEGORY: Holiday
     %%(org-calendar-holiday)   ; special function for holiday names
     #+CATEGORY: Ann
     %%(diary-anniversary  5 14 1956)(1) Arthur Dent is %d years old
     %%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old

   Org can interact with Emacs appointments notification facility.  To
add all the appointments of your agenda files, use the command
`org-agenda-to-appt'.  See the docstring for details.

   ---------- Footnotes ----------

   (1) Note that the order of the arguments (month, day, year) depends
on the setting of `calendar-date-style'.


File: orgguide.info,  Node: Global TODO list,  Next: Matching tags and properties,  Prev: Weekly/daily agenda,  Up: Built-in agenda views

10.3.2 The global TODO list
---------------------------

The global TODO list contains all unfinished TODO items formatted and
collected into a single place.  Remote editing of TODO items lets you
can change the state of a TODO entry with a single key press.  The
commands available in the TODO list are described in *Note Agenda
commands::.

`C-c a t'
     Show the global TODO list.  This collects the TODO items from all
     agenda files (*note Agenda Views::) into a single buffer.

`C-c a T'
     Like the above, but allows selection of a specific TODO keyword.


File: orgguide.info,  Node: Matching tags and properties,  Next: Timeline,  Prev: Global TODO list,  Up: Built-in agenda views

10.3.3 Matching tags and properties
-----------------------------------

If headlines in the agenda files are marked with _tags_ (*note Tags::),
or have properties (*note Properties::), you can select headlines based
on this metadata and collect them into an agenda buffer.  The match
syntax described here also applies when creating sparse trees with `C-c
/ m'.  The commands available in the tags list are described in *Note
Agenda commands::.

`C-c a m'
     Produce a list of all headlines that match a given set of tags.
     The command prompts for a selection criterion, which is a boolean
     logic expression with tags, like `+work+urgent-withboss' or
     `work|home' (*note Tags::).  If you often need a specific search,
     define a custom command for it (*note Agenda dispatcher::).

`C-c a M'
     Like `C-c a m', but only select headlines that are also TODO items.

Match syntax
............

A search string can use Boolean operators `&' for AND and `|' for OR.
`&' binds more strongly than `|'.  Parentheses are currently not
implemented.  Each element in the search is either a tag, a regular
expression matching tags, or an expression like `PROPERTY OPERATOR
VALUE' with a comparison operator, accessing a property value.  Each
element may be preceded by `-', to select against it, and `+' is
syntactic sugar for positive selection.  The AND operator `&' is
optional when `+' or `-' is present.  Here are some examples, using
only tags.

`+work-boss'
     Select headlines tagged `:work:', but discard those also tagged
     `:boss:'.

`work|laptop'
     Selects lines tagged `:work:' or `:laptop:'.

`work|laptop+night'
     Like before, but require the `:laptop:' lines to be tagged also
     `:night:'.

   You may also test for properties at the same time as matching tags,
see the manual for more information.


File: orgguide.info,  Node: Timeline,  Next: Search view,  Prev: Matching tags and properties,  Up: Built-in agenda views

10.3.4 Timeline for a single file
---------------------------------

The timeline summarizes all time-stamped items from a single Org mode
file in a _time-sorted view_.  The main purpose of this command is to
give an overview over events in a project.

`C-c a L'
     Show a time-sorted view of the Org file, with all time-stamped
     items.  When called with a `C-u' prefix, all unfinished TODO
     entries (scheduled or not) are also listed under the current date.


File: orgguide.info,  Node: Search view,  Prev: Timeline,  Up: Built-in agenda views

10.3.5 Search view
------------------

This agenda view is a general text search facility for Org mode entries.
It is particularly useful to find notes.

`C-c a s'
     This is a special search that lets you select entries by matching
     a substring or specific words using a boolean logic.
   For example, the search string `computer equipment' will find entries
that contain `computer equipment' as a substring.  Search view can also
search for specific keywords in the entry, using Boolean logic.  The
search string `+computer +wifi -ethernet -{8\.11[bg]}' will search for
note entries that contain the keywords `computer' and `wifi', but not
the keyword `ethernet', and which are also not matched by the regular
expression `8\.11[bg]', meaning to exclude both 8.11b and 8.11g.

   Note that in addition to the agenda files, this command will also
search the files listed in `org-agenda-text-search-extra-files'.


File: orgguide.info,  Node: Agenda commands,  Next: Custom agenda views,  Prev: Built-in agenda views,  Up: Agenda Views

10.4 Commands in the agenda buffer
==================================

Entries in the agenda buffer are linked back to the Org file or diary
file where they originate.  Commands are provided to show and jump to
the original entry location, and to edit the Org files "remotely" from
the agenda buffer.  This is just a selection of the many commands,
explore the `Agenda' menu and the manual for a complete list.

Motion
......

`n'
     Next line (same as <up> and `C-p').

`p'
     Previous line (same as <down> and `C-n').

View/Go to Org file
...................

`mouse-3'
`<SPC>'
     Display the original location of the item in another window.  With
     prefix arg, make sure that the entire entry is made visible in the
     outline, not only the heading.

`<TAB>'
     Go to the original location of the item in another window.  Under
     Emacs 22, `mouse-1' will also works for this.

`<RET>'
     Go to the original location of the item and delete other windows.

Change display
..............

`o'
     Delete other windows.

`d / w'
     Switch to day/week view.

`f and b'
     Go forward/backward in time to display the following
     `org-agenda-current-span' days.  For example, if the display
     covers a week, switch to the following/previous week.

`.'
     Go to today.

`j'
     Prompt for a date and go there.

`v l  or short  l'
     Toggle Logbook mode.  In Logbook mode, entries that were marked
     DONE while logging was on (variable `org-log-done') are shown in
     the agenda, as are entries that have been clocked on that day.
     When called with a `C-u' prefix, show all possible logbook
     entries, including state changes.

`r or g'
     Recreate the agenda buffer, to reflect the changes.

`s'
     Save all Org buffers in the current Emacs session, and also the
     locations of IDs.

Secondary filtering and query editing
.....................................

`/'
     Filter the current agenda view with respect to a tag.  You are
     prompted for a letter to select a tag.  Press `-' first to select
     against the tag.

`\'
     Narrow the current agenda filter by an additional condition.

Remote editing (see the manual for many more commands)
......................................................

`0-9'
     Digit argument.

`t'
     Change the TODO state of the item, in the agenda and in the org
     file.

`C-k'
     Delete the current agenda item along with the entire subtree
     belonging to it in the original Org file.

`C-c C-w'
     Refile the entry at point.

`C-c C-x C-a  or short  a'
     Archive the subtree corresponding to the entry at point using the
     default archiving command set in `org-archive-default-command'.

`C-c C-x C-s  or short  $'
     Archive the subtree corresponding to the current headline.

`C-c C-s'
     Schedule this item, with prefix arg remove the scheduling timestamp

`C-c C-d'
     Set a deadline for this item, with prefix arg remove the deadline.

`S-<right> and S-<left>'
     Change the timestamp associated with the current line by one day.

`I'
     Start the clock on the current item.

`O / X'
     Stop/cancel the previously started clock.

`J'
     Jump to the running clock in another window.


File: orgguide.info,  Node: Custom agenda views,  Prev: Agenda commands,  Up: Agenda Views

10.5 Custom agenda views
========================

The main application of custom searches is the definition of keyboard
shortcuts for frequently used searches, either creating an agenda
buffer, or a sparse tree (the latter covering of course only the current
buffer).  Custom commands are configured in the variable
`org-agenda-custom-commands'.  You can customize this variable, for
example by pressing `C-c a C'.  You can also directly set it with Emacs
Lisp in `.emacs'.  The following example contains all valid search
types:

     (setq org-agenda-custom-commands
           '(("w" todo "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")))

The initial string in each entry defines the keys you have to press
after the dispatcher command `C-c a' in order to access the command.
Usually this will be just a single character.  The second parameter is
the search type, followed by the string or regular expression to be
used for the matching.  The example above will therefore define:

`C-c a w'
     as a global search for TODO entries with `WAITING' as the TODO
     keyword

`C-c a u'
     as a global tags search for headlines marked `:boss:' but not
     `:urgent:'

`C-c a v'
     as the same search as `C-c a u', but limiting the search to
     headlines that are also TODO items

Further reading
Chapter 10 of the manual
(http://orgmode.org/manual/Agenda-Views.html#Agenda-Views)
Mat Lundin's tutorial about custom agenda commands
(http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.php)
John Wiegley's setup
(http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner.html)


File: orgguide.info,  Node: Markup,  Next: Exporting,  Prev: Agenda Views,  Up: Top

11 Markup for rich export
*************************

When exporting Org-mode documents, the exporter tries to reflect the
structure of the document as accurately as possible in the backend.
Since export targets like HTML, LaTeX, or DocBook allow much richer
formatting, Org mode has rules on how to prepare text for rich export.
This section summarizes the markup rules used in an Org-mode buffer.

* Menu:

* Structural markup elements::	The basic structure as seen by the exporter
* Images and tables::		Tables and Images will be included
* Literal examples::		Source code examples with special formatting
* Include files::		Include additional files into a document
* Embedded LaTeX::		LaTeX can be freely used inside Org documents


File: orgguide.info,  Node: Structural markup elements,  Next: Images and tables,  Prev: Markup,  Up: Markup

11.1 Structural markup elements
===============================

* Menu:

* Document title::		Where the title is taken from
* Headings and sections::	The document structure as seen by the exporter
* Table of contents::		The if and where of the table of contents
* Paragraphs::			Paragraphs
* Emphasis and monospace::	Bold, italic, etc.
* Comment lines::		What will *not* be exported


File: orgguide.info,  Node: Document title,  Next: Headings and sections,  Prev: Structural markup elements,  Up: Structural markup elements

Document title
--------------

The title of the exported document is taken from the special line

     #+TITLE: This is the title of the document


File: orgguide.info,  Node: Headings and sections,  Next: Table of contents,  Prev: Document title,  Up: Structural markup elements

Headings and sections
---------------------

The outline structure of the document as described in *Note Document
Structure::, forms the basis for defining sections of the exported
document.  However, since the outline structure is also used for (for
example) lists of tasks, only the first three outline levels will be
used as headings.  Deeper levels will become itemized lists.  You can
change the location of this switch globally by setting the variable
`org-export-headline-levels', or on a per-file basis with a line

     #+OPTIONS: H:4


File: orgguide.info,  Node: Table of contents,  Next: Paragraphs,  Prev: Headings and sections,  Up: Structural markup elements

Table of contents
-----------------

The table of contents is normally inserted directly before the first
headline of the file.

     #+OPTIONS: toc:2          (only to two levels in TOC)
     #+OPTIONS: toc:nil        (no TOC at all)


File: orgguide.info,  Node: Paragraphs,  Next: Emphasis and monospace,  Prev: Table of contents,  Up: Structural markup elements

Paragraphs, line breaks, and quoting
------------------------------------

Paragraphs are separated by at least one empty line.  If you need to
enforce a line break within a paragraph, use `\\' at the end of a line.

   To keep the line breaks in a region, but otherwise use normal
formatting, you can use this construct, which can also be used to
format poetry.

     #+BEGIN_VERSE
      Great clouds overhead
      Tiny black birds rise and fall
      Snow covers Emacs

          -- AlexSchroeder
     #+END_VERSE

   When quoting a passage from another document, it is customary to
format this as a paragraph that is indented on both the left and the
right margin.  You can include quotations in Org-mode documents like
this:

     #+BEGIN_QUOTE
     Everything should be made as simple as possible,
     but not any simpler -- Albert Einstein
     #+END_QUOTE

   If you would like to center some text, do it like this:
     #+BEGIN_CENTER
     Everything should be made as simple as possible, \\
     but not any simpler
     #+END_CENTER


File: orgguide.info,  Node: Emphasis and monospace,  Next: Comment lines,  Prev: Paragraphs,  Up: Structural markup elements

Emphasis and monospace
----------------------

You can make words *bold*, /italic/, _underlined_, `=code=' and
`~verbatim~', and, if you must, `+strike-through+'.  Text in the code
and verbatim string is not processed for Org-mode specific syntax, it
is exported verbatim.  To insert a horizontal rules, use a line
consisting of only dashes, and at least 5 of them.


File: orgguide.info,  Node: Comment lines,  Prev: Emphasis and monospace,  Up: Structural markup elements

Comment lines
-------------

Lines starting with `#' in column zero are treated as comments and will
never be exported. If you want an indented line to be treated as a
comment, start it with `#+ '.  Also entire subtrees starting with the
word `COMMENT' will never be exported.  Finally, regions surrounded by
`#+BEGIN_COMMENT' ... `#+END_COMMENT' will not be exported.

`C-c ;'
     Toggle the COMMENT keyword at the beginning of an entry.


File: orgguide.info,  Node: Images and tables,  Next: Literal examples,  Prev: Structural markup elements,  Up: Markup

11.2 Images and Tables
======================

For Org mode tables, the lines before the first horizontal separator
line will become table header lines.  You can use the following lines
somewhere before the table to assign a caption and a label for cross
references, and in the text you can refer to the object with
`\ref{tab:basic-data}':

     #+CAPTION: This is the caption for the next table (or link)
     #+LABEL:   tbl:basic-data
        | ... | ...|
        |-----|----|

   Some backends (HTML, LaTeX, and DocBook) allow you to directly
include images into the exported document.  Org does this, if a link to
an image files does not have a description part, for example
`[[./img/a.jpg]]'.  If you wish to define a caption for the image and
maybe a label for internal cross references, you sure that the link is
on a line by itself precede it with:

     #+CAPTION: This is the caption for the next figure link (or table)
     #+LABEL:   fig:SED-HR4049
     [[./img/a.jpg]]

   You may also define additional attributes for the figure.  As this is
backend-specific, see the sections about the individual backends for
more information.


File: orgguide.info,  Node: Literal examples,  Next: Include files,  Prev: Images and tables,  Up: Markup

11.3 Literal examples
=====================

You can include literal examples that should not be subjected to
markup.  Such examples will be typeset in monospace, so this is well
suited for source code and similar examples.

     #+BEGIN_EXAMPLE
     Some example from a text file.
     #+END_EXAMPLE

   For simplicity when using small examples, you can also start the
example lines with a colon followed by a space.  There may also be
additional whitespace before the colon:

     Here is an example
        : Some example from a text file.

   For source code from a programming language, or any other text that
can be marked up by font-lock in Emacs, you can ask for it to look like
the fontified Emacs buffer

     #+BEGIN_SRC emacs-lisp
     (defun org-xor (a b)
        "Exclusive or."
        (if a (not b) b))
     #+END_SRC

   To edit the example in a special buffer supporting this language, use
`C-c '' to both enter and leave the editing buffer.


File: orgguide.info,  Node: Include files,  Next: Embedded LaTeX,  Prev: Literal examples,  Up: Markup

11.4 Include files
==================

During export, you can include the content of another file.  For
example, to include your `.emacs' file, you could use:

     #+INCLUDE: "~/.emacs" src emacs-lisp
   The optional second and third parameter are the markup (e.g. `quote',
`example', or `src'), and, if the markup is `src', the language for
formatting the contents.  The markup is optional, if it is not given,
the text will be assumed to be in Org mode format and will be processed
normally. `C-c '' will visit the included file.


File: orgguide.info,  Node: Embedded LaTeX,  Prev: Include files,  Up: Markup

11.5 Embedded LaTeX
===================

For scientific notes which need to be able to contain mathematical
symbols and the occasional formula, Org-mode supports embedding LaTeX
code into its files.  You can directly use TeX-like macros for special
symbols, enter formulas and entire LaTeX environments.

     Angles are written as Greek letters \alpha, \beta and \gamma.  The mass if
     the sun is M_sun = 1.989 x 10^30 kg.  The radius of the sun is R_{sun} =
     6.96 x 10^8 m.  If $a^2=b$ and $b=2$, then the solution must be either
     $a=+\sqrt{2}$ or $a=-\sqrt{2}$.

     \begin{equation}
     x=\sqrt{b}
     \end{equation}
   With special setup
(http://orgmode.org/manual/LaTeX-fragments.html#LaTeX-fragments), LaTeX
snippets will be included as images when exporting to HTML.

Further reading
Chapter 11 of the manual (http://orgmode.org/manual/Markup.html#Markup)


File: orgguide.info,  Node: Exporting,  Next: Publishing,  Prev: Markup,  Up: Top

12 Exporting
************

Org-mode documents can be exported into a variety of other formats:
ASCII export for inclusion into emails, HTML to publish on the web,
LaTeX/PDF for beautiful printed documents and DocBook to enter the
world of many other formats using DocBook tools.  There is also export
to iCalendar format so that planning information can be incorporated
into desktop calendars.

* Menu:

* Export options::		Per-file export settings
* The export dispatcher::	How to access exporter commands
* ASCII/Latin-1/UTF-8 export::	Exporting to flat files with encoding
* HTML export::			Exporting to HTML
* LaTeX and PDF export::	Exporting to LaTeX, and processing to PDF
* DocBook export::		Exporting to DocBook
* iCalendar export::


File: orgguide.info,  Node: Export options,  Next: The export dispatcher,  Prev: Exporting,  Up: Exporting

12.1 Export options
===================

The exporter recognizes special lines in the buffer which provide
additional information.  These lines may be put anywhere in the file.
The whole set of lines can be inserted into the buffer with `C-c C-e t'.

`C-c C-e t'
     Insert template with export options, see example below.

     #+TITLE:       the title to be shown (default is the buffer name)
     #+AUTHOR:      the author (default taken from `user-full-name')
     #+DATE:        a date, fixed, of a format string for `format-time-string'
     #+EMAIL:       his/her email address (default from `user-mail-address')
     #+DESCRIPTION: the page description, e.g. for the XHTML meta tag
     #+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
     #+LANGUAGE:    language for HTML, e.g. `en' (`org-export-default-language')
     #+TEXT:        Some descriptive text to be inserted at the beginning.
     #+TEXT:        Several lines may be given.
     #+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
     #+LINK_UP:     the ``up'' link of an exported page
     #+LINK_HOME:   the ``home'' link of an exported page
     #+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}


File: orgguide.info,  Node: The export dispatcher,  Next: ASCII/Latin-1/UTF-8 export,  Prev: Export options,  Up: Exporting

12.2 The export dispatcher
==========================

All export commands can be reached using the export dispatcher, which
is a prefix key that prompts for an additional key specifying the
command.  Normally the entire file is exported, but if there is an
active region that contains one outline tree, the first heading is used
as document title and the subtrees are exported.

`C-c C-e'
     Dispatcher for export and publishing commands.


File: orgguide.info,  Node: ASCII/Latin-1/UTF-8 export,  Next: HTML export,  Prev: The export dispatcher,  Up: Exporting

12.3 ASCII/Latin-1/UTF-8 export
===============================

ASCII export produces a simple and very readable version of an Org-mode
file, containing only plain ASCII.  Latin-1 and UTF-8 export augment
the file with special characters and symbols available in these
encodings.

`C-c C-e a'
     Export as ASCII file.

`C-c C-e n   and   C-c C-e N'
     Like the above commands, but use Latin-1 encoding.

`C-c C-e u   and   C-c C-e U'
     Like the above commands, but use UTF-8 encoding.


File: orgguide.info,  Node: HTML export,  Next: LaTeX and PDF export,  Prev: ASCII/Latin-1/UTF-8 export,  Up: Exporting

12.4 HTML export
================

`C-c C-e h'
     Export as HTML file `myfile.html'.

`C-c C-e b'
     Export as HTML file and immediately open it with a browser.

   To insert HTML that should be copied verbatim to the exported file
use either

     #+HTML: Literal HTML code for export
   or
     #+BEGIN_HTML
     All lines between these markers are exported literally
     #+END_HTML


File: orgguide.info,  Node: LaTeX and PDF export,  Next: DocBook export,  Prev: HTML export,  Up: Exporting

12.5 LaTeX and PDF export
=========================

`C-c C-e l'
     Export as LaTeX file `myfile.tex'.

`C-c C-e p'
     Export as LaTeX and then process to PDF.

`C-c C-e d'
     Export as LaTeX and then process to PDF, then open the resulting
     PDF file.

   By default, the LaTeX output uses the class `article'.  You can
change this by adding an option like `#+LaTeX_CLASS: myclass' in your
file.  The class must be listed in `org-export-latex-classes'.

   Embedded LaTeX as described in *Note Embedded LaTeX::, will be
correctly inserted into the LaTeX file.  Similarly to the HTML
exporter, you can use `#+LaTeX:' and `#+BEGIN_LaTeX ... #+END_LaTeX'
construct to add verbatim LaTeX code.


File: orgguide.info,  Node: DocBook export,  Next: iCalendar export,  Prev: LaTeX and PDF export,  Up: Exporting

12.6 DocBook export
===================

`C-c C-e D'
     Export as DocBook file.

   Similarly to the HTML exporter, you can use `#+DocBook:' and
`#+BEGIN_DocBook ... #+END_DocBook' construct to add verbatim LaTeX
code.


File: orgguide.info,  Node: iCalendar export,  Prev: DocBook export,  Up: Exporting

12.7 iCalendar export
=====================

`C-c C-e i'
     Create iCalendar entries for the current file in a `.ics' file.

`C-c C-e c'
     Create a single large iCalendar file from all files in
     `org-agenda-files' and write it to the file given by
     `org-combined-agenda-icalendar-file'.

Further reading
Chapter 12 of the manual
(http://orgmode.org/manual/Exporting.html#Exporting)
Sebastian Rose's image handling tutorial
(http://orgmode.org/worg/org-tutorials/images-and-xhtml-export.php)
Thomas Dye's LaTeX export tutorial
(http://orgmode.org/worg/org-tutorials/org-latex-export.php) Eric
Fraga's BEAMER presentation tutorial
(http://orgmode.org/worg/org-tutorials/org-beamer/tutorial.php)


File: orgguide.info,  Node: Publishing,  Next: Working With Source Code,  Prev: Exporting,  Up: Top

13 Publishing
*************

Org includes a publishing management system that allows you to configure
automatic HTML conversion of _projects_ composed of interlinked org
files.  You can also configure Org to automatically upload your
exported HTML pages and related attachments, such as images and source
code files, to a web server.  For detailed instructions about setup,
see the manual.

   Here is an example:

     (setq org-publish-project-alist
           '(("org"
              :base-directory "~/org/"
              :publishing-directory "~/public_html"
              :section-numbers nil
              :table-of-contents nil
              :style "<link rel=\"stylesheet\"
                     href=\"../other/mystyle.css\"
                     type=\"text/css\"/>")))

`C-c C-e C'
     Prompt for a specific project and publish all files that belong to
     it.

`C-c C-e P'
     Publish the project containing the current file.

`C-c C-e F'
     Publish only the current file.

`C-c C-e E'
     Publish every project.

   Org uses timestamps to track when a file has changed. The above
functions normally only publish changed files. You can override this
and force publishing of all files by giving a prefix argument to any of
the commands above.

Further reading
Chapter 13 of the manual
(http://orgmode.org/manual/Publishing.html#Publishing)
Sebastian Rose's publishing tutorial
(http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.php)
Ian Barton's Jekyll/blogging setup
(http://orgmode.org/worg/org-tutorials/org-jekyll.php)


File: orgguide.info,  Node: Working With Source Code,  Next: Miscellaneous,  Prev: Publishing,  Up: Top

14 Working with source code
***************************

Org-mode provides a number of features for working with source code,
including editing of code blocks in their native major-mode, evaluation
of code blocks, tangling of code blocks, and exporting code blocks and
their results in several formats.

Structure of Code Blocks
------------------------

The structure of code blocks is as follows:

     #+srcname: <name>
     #+begin_src <language> <switches> <header arguments>
       <body>
     #+end_src

   Where `<name>' is a string used to name the code block, `<language>'
specifies the language of the code block (e.g. `emacs-lisp', `shell',
`R', `python', etc...), `<switches>' can be used to control export of
the code block, `<header arguments>' can be used to control many
aspects of code block behavior as demonstrated below, and `<body>'
contains the actual source code.

Editing source code
-------------------

Use `C-c '' to edit the current code block. This brings up a language
major-mode edit buffer containing the body of the code block. Saving
this buffer will write the new contents back to the Org buffer. Use
`C-c '' again to exit the edit buffer.

Evaluating code blocks
----------------------

Use `C-c C-c' to evaluate the current code block and insert its results
in the Org-mode buffer.  By default, evaluation is only turned on for
`emacs-lisp' code blocks, however support exists for evaluating blocks
in many languages.  For a complete list of supported languages see the
manual.  The following shows a code block and its results.

     #+begin_src emacs-lisp
       (+ 1 2 3 4)
     #+end_src

     #+results:
     : 10

Extracting source code
----------------------

Use `C-c C-v t' to create pure source code files by extracting code from
source blocks in the current buffer.  This is referred to as
"tangling"--a term adopted from the literate programming community.
During "tangling" of code blocks their bodies are expanded using
`org-babel-expand-src-block' which can expand both variable and "noweb"
style references.  In order to tangle a code block it must have a
`:tangle' header argument, see the manual for details.

Library of Babel
----------------

Use `C-c C-v l' to load the code blocks from an Org-mode files into the
"Library of Babel", these blocks can then be evaluated from any Org-mode
buffer.  A collection of generally useful code blocks is distributed
with Org-mode in `contrib/library-of-babel.org'.

Header Arguments
----------------

Many aspects of the evaluation and export of code blocks are controlled
through header arguments.  These can be specified globally, at the file
level, at the outline subtree level, and at the individual code block
level.  The following describes some of the header arguments.
`:var'
     The `:var' header argument is used to pass arguments to code
     blocks.  The values passed to arguments can be literal values,
     values from org-mode tables and literal example blocks, or the
     results of other named code blocks.

`:results'
     The `:results' header argument controls the _collection_, _type_,
     and _handling_ of code block results.  Values of `output' or
     `value' (the default) specify how results are collected from a
     code block's evaluation.  Values of `vector', `scalar' `file'
     `raw' `html' `latex' and `code' specify the type of the results of
     the code block which dictates how they will be incorporated into
     the Org-mode buffer.  Values of `silent', `replace', `prepend',
     and `append' specify handling of code block results, specifically
     if and how the results should be inserted into the Org-mode buffer.

`:session'
     A header argument of `:session' will cause the code block to be
     evaluated in a persistent interactive inferior process in Emacs.
     This allows for persisting state between code block evaluations,
     and for manual inspection of the results of evaluation.

`:exports'
     Any combination of the _code_ or the _results_ of a block can be
     retained on export, this is specified by setting the `:results'
     header argument to `code' `results' `none' or `both'.

`:tangle'
     A header argument of `:tangle yes' will cause a code block's
     contents to be tangled to a file named after the filename of the
     Org-mode buffer.  An alternate file name can be specified with
     `:tangle filename'.

`:cache'
     A header argument of `:cache yes' will cause associate a hash of
     the expanded code block with the results, ensuring that code
     blocks are only re-run when their inputs have changed.

`:noweb'
     A header argument of `:noweb yes' will expand "noweb" style
     references on evaluation and tangling.

`:file'
     Code blocks which output results to files (e.g. graphs, diagrams
     and figures) can accept a `:file filename' header argument in
     which case the results are saved to the named file, and a link to
     the file is inserted into the Org-mode buffer.

Further reading
Chapter 11.3 of the manual
(http://orgmode.org/manual/Literal-examples.html#Literal-examples)
The Babel site on Worg
(http://orgmode.org/worg/org-contrib/babel/index.php)


File: orgguide.info,  Node: Miscellaneous,  Prev: Working With Source Code,  Up: Top

15 Miscellaneous
****************

* Menu:

* Completion::			M-TAB knows what you need
* Clean view::			Getting rid of leading stars in the outline
* MobileOrg::			Org-mode on the iPhone


File: orgguide.info,  Node: Completion,  Next: Clean view,  Prev: Miscellaneous,  Up: Miscellaneous

15.1 Completion
===============

Org supports in-buffer completion with `M-<TAB>'.  This type of
completion does not make use of the minibuffer.  You simply type a few
letters into the buffer and use the key to complete text right there.
For example, this command will complete TeX symbols after `\', TODO
keywords at the beginning of a headline, and tags after `:' in a
headline.


File: orgguide.info,  Node: Clean view,  Next: MobileOrg,  Prev: Completion,  Up: Miscellaneous

15.2 A cleaner outline view
===========================

Some people find it noisy and distracting that the Org headlines start
with a potentially large number of stars, and that text below the
headlines is not indented.  While this is no problem when writing a
_book-like_ document where the outline headings are really section
headings, in a more _list-oriented_ outline, indented structure is a
lot cleaner:

     * Top level headline             |    * Top level headline
     ** Second level                  |      * Second level
     *** 3rd level                    |        * 3rd level
     some text                        |          some text
     *** 3rd level                    |        * 3rd level
     more text                        |          more text
     * Another top level headline     |    * Another top level headline

If you are using at least Emacs 23.1.50.3 and version 6.29 of Org, this
kind of view can be achieved dynamically at display time using
`org-indent-mode', which will prepend intangible space to each line.
You can turn on `org-indent-mode' for all files by customizing the
variable `org-startup-indented', or you can turn it on for individual
files using

     #+STARTUP: indent

   If you want a similar effect in earlier version of Emacs and/or Org,
or if you want the indentation to be hard space characters so that the
plain text file looks as similar as possible to the Emacs display, Org
supports you by helping to indent (with <TAB>) text below each
headline, by hiding leading stars, and by only using levels 1, 3, etc
to get two characters indentation for each level.  To get this support
in a file, use

     #+STARTUP: hidestars odd


File: orgguide.info,  Node: MobileOrg,  Prev: Clean view,  Up: Miscellaneous

15.3 MobileOrg
==============

MobileOrg is an application originally developed for the iPhone/iPod
Touch series of devices, developed by Richard Moreland.  There is also
an independent implementation for Android devices, by Matt Jones.  For
details, see the Org-mode manual.

Further reading
Chapter 15 of the manual
(http://orgmode.org/manual/Miscellaneous.html#Miscellaneous)
Appendix B of the manual
(http://orgmode.org/manual/MobileOrg.html#MobileOrg)
Key reference card (http://orgmode.org/orgcard.pdf)



Tag Table:
Node: Top1197
Node: Introduction7036
Node: Preface7358
Node: Installation7976
Node: Activation8988
Node: Feedback9709
Node: Document Structure10029
Node: Outlines10690
Node: Headlines11356
Ref: Headlines-Footnote-112025
Node: Visibility cycling12136
Node: Motion13298
Node: Structure editing13700
Ref: Structure editing-Footnote-114894
Node: Sparse trees14994
Ref: Sparse trees-Footnote-116038
Node: Plain lists16244
Node: Footnotes18655
Node: Tables19757
Node: Hyperlinks23538
Node: Link format24041
Node: Internal links24663
Node: External links25209
Node: Handling links27338
Node: Targeted links28692
Node: TODO Items29426
Ref: TODO Items-Footnote-130472
Node: Using TODO states30586
Node: Multi-state workflows31879
Node: Progress logging33823
Node: Closing items34476
Ref: Closing items-Footnote-135187
Ref: Closing items-Footnote-235256
Node: Tracking TODO state changes35329
Node: Priorities36371
Node: Breaking down tasks37155
Node: Checkboxes37942
Node: Tags39307
Node: Tag inheritance40096
Ref: Tag inheritance-Footnote-140970
Node: Setting tags41070
Node: Tag searches43085
Node: Properties44468
Node: Dates and Times46361
Node: Timestamps46927
Node: Creating timestamps48783
Node: Deadlines and scheduling50332
Ref: Deadlines and scheduling-Footnote-152257
Ref: Deadlines and scheduling-Footnote-252421
Node: Clocking work time52576
Node: Capture - Refile - Archive54701
Node: Capture55425
Node: Setting up a capture location56063
Ref: Setting up a capture location-Footnote-156518
Ref: Setting up a capture location-Footnote-256634
Node: Using capture56700
Node: Capture templates57378
Ref: Capture templates-Footnote-159067
Node: Refiling notes59154
Node: Archiving60221
Node: Agenda Views61733
Node: Agenda files62981
Node: Agenda dispatcher63636
Node: Built-in agenda views64479
Node: Weekly/daily agenda64967
Ref: Weekly/daily agenda-Footnote-166121
Node: Global TODO list66234
Node: Matching tags and properties66944
Node: Timeline68911
Node: Search view69506
Node: Agenda commands70513
Node: Custom agenda views73851
Node: Markup75597
Node: Structural markup elements76419
Node: Document title76915
Node: Headings and sections77206
Node: Table of contents77886
Node: Paragraphs78253
Node: Emphasis and monospace79431
Node: Comment lines79926
Node: Images and tables80476
Node: Literal examples81742
Node: Include files82812
Node: Embedded LaTeX83452
Node: Exporting84412
Node: Export options85239
Node: The export dispatcher86578
Node: ASCII/Latin-1/UTF-8 export87148
Node: HTML export87766
Node: LaTeX and PDF export88280
Node: DocBook export89092
Node: iCalendar export89430
Node: Publishing90224
Node: Working With Source Code91880
Node: Miscellaneous97167
Node: Completion97443
Node: Clean view97928
Node: MobileOrg99715

End Tag Table
