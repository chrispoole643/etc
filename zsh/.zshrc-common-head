# -*- mode: shell-script -*-
################################################################################
### Common functions and aliases
### ============================
###
### Functions and aliases that work on mac and linux machines
################################################################################


################################################################################
## Environment
################################################################################


export PAGER=less
export EDITOR='emacsclient'

HISTFILE="$HOME/.zhistory"
HISTSIZE=3000
SAVEHIST=3000


################################################################################
## zsh setup
################################################################################


zstyle :compinstall filename '$HOME/.zshrc'
# Tab completion, etc.
autoload -Uz compinit promptinit
compinit -u
promptinit

setopt appendhistory     # append to HISTFILE
setopt autocd            # go to directories without "cd"
setopt extendedglob      # wacky zsh-specific pattern matching
setopt nocheckjobs       # don't complain about background jobs on exit
setopt nohup             # don't kill background jobs on exit
#setopt printexitvalue   # print exit value from jobs
setopt noautoremoveslash

setopt correct           # command correction
setopt extendedhistory	 # puts timestamps in the history
setopt histallowclobber
setopt histreduceblanks
setopt multios           # now we can pipe to multiple outputs!
setopt incappendhistory
setopt sharehistory
setopt nobeep            # beeps are annoying
setopt rmstarwait        # 10 second wait if you do something that will delete everything
setopt globcomplete      # if we have a glob this will expand it
setopt menucomplete
setopt histignorealldups # even if there are commands inbetween commands that
                         # are the same, still only save the last one
setopt notify
setopt globdots
setopt pushdtohome
setopt cdablevars
setopt autolist
# setopt correctall
setopt recexact
setopt longlistjobs
setopt autoresume
setopt pushdsilent
setopt noclobber
setopt autopushd
setopt pushdminus
setopt rcquotes
setopt mailwarning
setopt promptsubst

unsetopt autoparamslash
unsetopt allexport
unsetopt bgnice          # do not nice bg commands (don't set background commands at
                         # lower priority)

autoload -U select-word-style
select-word-style bash   # make word boundaries and stuff work like Bash


# Key binding
# -----------

bindkey -e                 # Emacs-style keybindings
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^I' complete-word # complete on tab, leave expansion to _expand


# Completion settings
# -------------------

# cache completions (useful for apt/dpkg package completions)
zstyle ':completion:*' use-cache onzstyle ':completion:*' cache-path $HOME/cache

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
#zstyle ':completion:*' list-colors "=(#b) #([0-9]#)*=36=31" # code completion
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:processes' command 'ps -axw'
zstyle ':completion:*:processes-names' command 'ps -awxho command'
# Completion Styles
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions
#
#NEW completion:
# 1. All /etc/hosts hostnames are in autocomplete
# 2. If you have a comment in /etc/hosts like #%foobar.domain,
#    then foobar.domain will show up in autocomplete!
zstyle ':completion:*' hosts $(awk '/^[^#]/ {print $2 $3" "$4" "$5}' /etc/hosts | grep -v ip6- && grep "^#%" /etc/hosts | awk -F% '{print $2}')
# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Separate man page sections.  Neat.
zstyle ':completion:*:manuals' separate-sections true

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
#zstyle ':completion:*:processes' command 'ps -o pid,s,nice,stime,args'
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'
zstyle '*' hosts $hosts

# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro'
# the same for old style completion
#fignore=(.o .c~ .old .pro)

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:scp:*' tag-order \
   files users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order \
   files all-files users hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order \
   users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order \
   hosts-domain hosts-host users hosts-ipaddr
zstyle '*' single-ignored show

# Don't prompt for a huge list, page it!
zstyle ':completion:*:default' list-prompt '%S%M matches%s'

# Don't prompt for a huge list, menu it!
zstyle ':completion:*:default' menu 'select=0'

# generate descriptions with magic.
zstyle ':completion:*' auto-description 'specify: %d'


# Custom completion commands
# --------------------------

# # pip zsh completion start
# function _pip_completion {
#     local words cword
#     read -Ac words
#     read -cn cword
#     reply=( $( COMP_WORDS="$words[*]" \
#         COMP_CWORD=$(( cword-1 )) \
#         PIP_AUTO_COMPLETE=1 $words[1] ) )
# }
# compctl -K _pip_completion pip
# # pip zsh completion end


################################################################################
## Loading
################################################################################


# fasd
eval "$(fasd --init auto)"

# Load ssh keys (alive for 8 hours)
eval $(keychain --timeout 480 --ignore-missing --agents ssh --nogui --inherit any --eval github dundee pi strongspace gsa)


################################################################################
## Aliases
################################################################################


# Defaults
alias f='fasd -f'        # file
alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection

alias j='fasd_cd -d'
alias ji='fasd_cd -id'

alias kill-keychain-agents='keychain --clear'
alias kill-gpg-agent='killall gpg-agent'
alias more=less
alias gi=get_iplayer
alias gig='get_iplayer -g'
alias fget='get_flash_videos'
alias gits='git st | less'
alias femacs='emacs -Q -nw'
alias zz="source $HOME/.zshrc"
alias e='emacsclient -na ""'
alias et='emacsclient -nta ""'
alias diffs='diff -s'
alias ll="ls -lh"
alias la="ls -a1"
alias lsd='gls -1 -X --group-directories-first'
alias div='dirs -v'
alias getip='curl ifconfig.me'
alias get='curl -C - -OL'
alias calc='emacs -Q -nw -f full-calc'
alias st=start-tmux

# Return a list of all sub-directories (recursively), together with how many
# files each one contains. Sort to put directories with the most files at the
# bottom
alias filesindirs='find . -type d | while read dir; do; echo "$dir" : $(find "$dir" -type f | wc -l); done | sort -k2 -t ":" -n'


################################################################################
## Variables
################################################################################


tmux_name=main


################################################################################
## Functions
################################################################################


# Golang
gomkdir () {
    echo mkdir -p "$GOPATH/src/github.com/chrispoole643/$2"
}

# gpg
inform-emacs-gpg-agent () {
    agent_id=$(env | grep GPG_AGENT_INFO | awk -F '=' '{print $2}')
    emacsclient -e "(setenv \"GPG_AGENT_INFO\" \"$agent_id\")"
}

start-gpg-agent () {
    time=${1:-'180'} # Request key cache time in minutes
    time_sec=$(($time * 60))
    _start-gpg-agent "$time_sec" && inform-emacs-gpg-agent
    starter_file="/tmp/gpg-agent-starter"
    sig_starter_file="$starter_file.gpg"
    gpg_key=${1:-"$cjp_gpg_key"}
    touch "$starter_file"
    if [[ -f "$sig_starter_file" ]]; then
        rm "$sig_starter_file"
    fi
    gpg -esr "$gpg_key" -o "$sig_starter_file" "$starter_file"
    if [[ -f "$starter_file" ]]; then
        rm "$starter_file"
    fi
    gpg -d -o "$starter_file" "$sig_starter_file"
    if [[ -f "$starter_file" ]]; then
        rm "$starter_file"
    fi
    if [[ -f "$sig_starter_file" ]]; then
        rm "$sig_starter_file"
    fi
}

# tmux
start-tmux () {
    # If we're not in tmux, and session exists
    if $(tmux has -t "$tmux_name" > /dev/null 2>&1) && [[ "$TMUX" == "" ]]; then
        tmux attach -d -t "$tmux_name"
    elif [[ "$TMUX" == "" ]]; then
        _start-tmux "$tmux_name"
    fi
}

tc () {
    bufnum=${1:-'0'}
    tmux showb -b"$bufnum" | pbcopy
    if [[ "$TMUX" == "" ]]; then
        tmux attach
    fi
}

# Miscellaneous
getfiles () {
    curl -SL "$2" | grep -Eoh "\"[^\"]+?\.$1\"" | uniq | \
        xargs -n1 -P2 curl -C - -LO
}

# Find options in man pages quickly
gman () {
    3=${3:-'0'}
    man -- $1 | col -bx | if [[ $2 == "" ]]; then
        grep -Em2 -- "^ +$1"
    else
        if [[ $3 -lt 0 ]]; then
            grep -C${3#-} -- $2
        else
            grep -A$3 -- $2
        fi | more
    fi
}

rm-ssh-known-host () {
    sed -i'' -e "${1}d" "$HOME/.ssh/known_hosts"
}

# Symmetric encryption
cencrypt () {
    for i in "$@"; do
        if [ -d "$i" ]; then
            tar cf - "$i" | gpg -c -z9 --cipher-algo AES256 --compress-algo bzip2 \
                -o ${i%/##}.tar.gpg && ls -lh "$i"* && srm -rDi ${i%/##}
        elif [ -f "$i" ]; then
            gpg -c -z9 --cipher-algo AES256 --compress-algo bzip2 \
                -o ${i}.gpg "$i" && ls -lh "$i"* && srm -Di "$i"
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Encrypt file or folder to myself, tarring folders
encrypt () {
    for i in "$@"; do
        if [ -d "$i" ]; then
            # Strip following '/'
            tar cf - "$i" | gpg -er "$cjp_gpg_key" -z9 -o ${i%/##}.tar.gpg && du -hs ${i%/##}* && srm -rDi ${i%/##}
        elif [ -f "$i" ]; then
            gpg -er "$cjp_gpg_key" -z9 -o ${i}.gpg "$i" && ls -lh "$i"* && srm -Di "$i"
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Encrypt and sign file or folder to myself, tarring folders
sencrypt () {
    for i in "$@"; do
        if [ -d "$i" ]; then
            # Strip following '/'
            tar cf - "$i" | gpg -esr "$cjp_gpg_key" -z9 -o ${i%/##}.tar.gpg && du -hs ${i%/##}* && srm -rDi ${i%/##}
        elif [ -f "$i" ]; then
            gpg -esr "$cjp_gpg_key" -z9 -o ${i}.gpg "$i" && ls -lh "$i"* && srm -Di "$i"
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Decrypts file or folder that has been encrypted with previous method
decrypt () {
    for i in "$@"; do
        if [[ ${i#*.} = "tar.gpg" ]]; then
            gpg -d "$i" | tar xf - && du -hs ${i%%.*}* && rm -i "$i"
        elif [ -f "$i" ]; then
            gpg -o ${i%.gpg} -d "$i" && ls -lh ${i%.gpg}* && rm -i "$i" # Output without .gpg extension
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Useful if md5 program not available. Easier syntax for sha1
omd5 () {
    echo -n "$1" | openssl dgst -md5
}

osha1 () {
    echo -n "$1" | openssl dgst -sha1
}

# Unzip to a directory
unzipdir () {
    unzip -d ${1%.zip} "$1"
}

# Handy!
xtr () {
    for file in "$@"; do
        if [ -f "$file" ] ; then
            case "$file" in
                *.tar.bz2)   tar xvjf "$file"    ;;
                *.tar.gz)    tar xvzf "$file"    ;;
                *.tar.xz)    tar xvJf "$file"    ;;
                *.tar)       tar xvf "$file"     ;;
                *.tbz2)      tar xvjf "$file"    ;;
                *.tbz)       tar xvjf "$file"    ;;
                *.tgz)       tar xvzf "$file"    ;;
                *.bz2)       bunzip2 "$file"     ;;
                *.rar)       unrar x "$file"     ;;
                *.gz)        gunzip "$file"      ;;
                *.xz)        unxz "$file"        ;;
                *.zip)       unzipdir "$file"    ;;
                *.Z)         uncompress "$file"  ;;
                *.7z)        7z x "$file"        ;;
                *.gpg)       decrypt "$file"     ;;
                *)           echo "don't know how to extract '$file'..." ;;
            esac
        else
            echo "'$file' is not a valid file!"
        fi
    done
}

bz22xz () {
    for file in "$@"; do
        if [ -f "$file" ] ; then
            bunzip2 -c "$file" | xz -c -9 > ${file%.bz2}.xz
        else
            echo "'$file' is not a valid file!"
        fi
    done
}


################################################################################
## Final setup
################################################################################


# Prompt
PURE_GIT_UNTRACKED_DIRTY=0
source "$HOME/.zsh-prompts/prompt_pure_setup"
