* Contributed functions
Useful functions from other people.

** Mac-specific

Missing from Emacs 24.3.50.1 (Git build)

#+BEGIN_SRC emacs-lisp
  (defun browse-url-default-macosx-browser (url &optional new-window)
    (interactive (browse-url-interactive-arg "URL: "))
    (if (and new-window (>= emacs-major-version 23))
        (ns-do-applescript
         (format (concat "tell application \"Safari\" to make document with properties {URL:\"%s\"}\n"
                         "tell application \"Safari\" to activate") url))
      (start-process (concat "open " url) nil "open" url)))
#+END_SRC

** Generic

Useful function from Steve Yegge http://steve.yegge.googlepages.com/my-dot-emacs-file

#+BEGIN_SRC emacs-lisp
  (defun move-buffer-file (dir)
    "Moves both current buffer and file it's visiting to DIR." (interactive "DNew directory: ")
    (let* ((name (buffer-name))
           (filename (buffer-file-name))
           (dir
            (if (string-match dir "\\(?:/\\|\\\\)$")
                (substring dir 0 -1) dir))
           (newname (concat dir "/" name)))

      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (progn
          (copy-file filename newname 1)
          (delete-file filename)
          (set-visited-file-name newname)
          (set-buffer-modified-p nil) t))))
#+END_SRC

Great frame- or window-resizing function from
http://dse.livejournal.com/67732.html. Resizes either frame or window to 90 columns. If
the window can be sized to 90 columns wide, without resizing the frame itself, it will
resize the window. Otherwise, it will resize the frame. You can use a prefix argument to
specify a different column width

#+BEGIN_SRC emacs-lisp
  (defun fix-frame-horizontal-size (width)
    "Set the frame's size to 90 (or prefix arg WIDTH) columns wide."
    (interactive "P")
    (if window-system
        (set-frame-width (selected-frame) (or width 90))
      (error "Cannot resize frame horizontally: is a text terminal")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun fix-window-horizontal-size (width)
    "Set the window's size to 90 (or prefix arg WIDTH) columns wide."
    (interactive "P")
    (enlarge-window (- (or width 90) (window-width)) 'horizontal))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun fix-horizontal-size (width)
    "Set the window's or frame's width to 90 (or prefix arg WIDTH)."
    (interactive "P")
    (condition-case nil
        (fix-window-horizontal-size width)
      (error
       (condition-case nil
           (fix-frame-horizontal-size width)
         (error
          (error "Cannot resize window or frame horizontally"))))))
#+END_SRC

Makes repeating align-regexp lots of times easy.  Found at
http://emacswiki.org/emacs/AlignCommands

#+BEGIN_SRC emacs-lisp
  (defun align-repeat (start end regexp)
    "repeat alignment with respect to
       the given regular expression"
    (interactive "r\nsAlign regexp: ")
    (align-regexp start end
                  (concat "\\(\\s-*\\)" regexp) 1 1 t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun swap-windows ()
    "If you have 2 windows, it swaps them."
    (interactive)
    (cond ((not (= (count-windows) 2))
           (message "You need exactly 2 windows to do this."))
          (t
           (let* ((w1 (first (window-list)))
                  (w2 (second (window-list)))
                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))
                  (s1 (window-start w1))
                  (s2 (window-start w2)))
             (set-window-buffer w1 b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (other-window 1)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun find-alternative-file-with-sudo ()
    "Open the current buffer with privileges given by `sudo'."
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))
#+END_SRC
