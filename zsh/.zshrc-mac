# -*- mode: shell-script -*-
################################################################################
### zsh settings for Mac
### ====================
### 
################################################################################


################################################################################
## Path and environment
################################################################################

fpath=(/Users/chris/.zsh-prompts /usr/local/share/zsh-completions $fpath)
export PYTHONPATH="/usr/local/lib/python3.7/site-packages"
LC_ALL='en_US.UTF-8'
LANG='en_US.UTF-8'
LC_CTYPE=C

export PATH="$HOME/bin:$HOME/Support/Reference/Projects/GitHub/hyperpcons-build-server/local:/usr/local/opt/python/libexec/bin:$PATH:/usr/local/opt/gnu-sed/libexec/gnubin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/ruby/bin:/usr/local/bin:/usr/local/sbin:$HOME/.cabal/bin:/usr/local/Cellar/git/1.8.5.2/libexec/git-core:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/usr/local/opt/go/libexec/bin:/usr/local/texlive/2017/bin/x86_64-darwin"

export GOPATH="$HOME/go-workspace"

# Find and set JAVA_HOME to be the latest JDK installed
cd /Library/Java/JavaVirtualMachines/
cd $(ls | tail -1)
cd Contents/Home/
export JAVA_HOME=$(pwd)
cd $HOME

################################################################################
## Aliases
################################################################################


alias bemacs='emacs -nw -f cjp-erc-bitlbee'

# View current wording directory in Emacs Dired window
alias cde='emacsclient -e "(dired \"$(pwd)\")" && osascript -e "tell application \"Emacs\" to activate" 2>/dev/null'

## Suffix aliases
alias -s flv='open -a Quicktime\ Player.app'
alias -s avi='open -a Quicktime\ Player.app'
alias -s mp4='open -a Quicktime\ Player.app'
alias -s mov='open -a Quicktime\ Player.app'
alias -s m4v='open -a Quicktime\ Player.app'
alias -s mkv='open -a VLC.app'
alias -s pdf='open -a Preview.app'
alias -s jpg='open -a Preview.app'
alias -s png='open -a Preview.app'
alias -s htm='open -a Google\ Chrome.app'
alias -s html='open -a Google\ Chrome.app'
alias -s txt=e

# Quicklook a file
alias ql='qlmanage -p 2>/dev/null'

# Eject disc drive
alias maceject='drutil eject'

# Perhaps these commands are easier to remember?
alias maccopy=pbcopy
alias macpaste=pbpaste

# Open file with default text editor
alias macedit='open -t'

# Aliases for video files
alias vlc='open -a VLC'
alias movist='open -a Movist'
alias qtime='open -a Quicktime\ Player'

alias o='fasd -fe open'
alias od='fasd -ide open'
alias oi='fasd -iae open'


################################################################################
## Variables
################################################################################


# I use different keys for personal and work use. Since Dropbox isn't allowed at
# work, it's reasonable to assume that if I don't see the directory, this is
# running on my work machine.
if [[ -d "$HOME/Dropbox" ]]; then
    cjp_gpg_key=BAD246F9
else
    cjp_gpg_key=1DE85A0C
fi


################################################################################
## Functions
################################################################################


# git
gitsync () {
    branch=${1:=master}
    upstream=${2:=upstream}
    origin=${3:=origin}
    git checkout "$branch" && 
        git pull "$upstream" "$branch" &&
        git push "$origin" "$branch" &&
        git log HEAD~3..HEAD
}

gitwork () {
    branch=${2:=master}
    gitsync "$branch" && git checkout -b "$1"
}

# gpg
_start-gpg-agent () {
    time=${1:-'1200'}          # 1200 seconds, 20 minutes
    eval $(gpg-agent -q --daemon --write-env-file "$HOME/.gpg-agent-info" \
        --default-cache-ttl "$time" --pinentry-program /usr/local/bin/pinentry \
        --max-cache-ttl 86400 \ # 24 hours
        --use-standard-socket)
}

# tmux
_start-tmux () {
    tmux new -d -s "$tmux_name" -n - \; neww -d -n - \; neww -d -n - \; attach
}

# Miscellaneous
finder () {
    z $@ && open .
}

gen-cal-year () {
    year=${1:-$(date '+%Y')}
    pcal -b all -S -P a4 -t Times-Bold/24 -d Times-Bold/14 -F Monday ${year} \
        | ps2pdf - ${year}a.pdf &&
    pdfcrop --margins 10 ${year}a.pdf ${year}.pdf &&
    rm ${year}a.pdf
}

youtube-rss () {
    printf "http://www.youtube.com/rss/user/$1/videos.rss\n" | tee >(pbcopy)
}

# Format 'show SxxExx.avi' filename nicely
nice_titles () {
    if [[ -f ".DS_Store" ]]; then
        rm .DS_Store
    fi
    rename 's/\.(?!avi|mkv)/ /g' "$@"
    rename 's/^(.+)([Ss]\d{1,2}[Ee]\d{1,2}(-\d{1,2})?)(.+\.(avi|mkv))/$2 $1 $4/' "$@"
    rename 's/ +/ /g' "$@"
    rename -f 's/s(\d{1,2})e(\d{1,2})/S$1E$2/' "$@"
}

# Move files in directory $1 up a level, remove empty directory
move_up () {
    if [[ -d "$1" ]]; then
        cd "$1" && mv * ../ && cd ../
        find . -type d -empty -print0 | xargs -0I'{}' rm -r {}
    fi
}

# Generates base64 random password (remove -m flag for other symbols)
ranpwd () {
    cat /dev/random | guuencode -m - | head -n 2 | tail -n 1
}

# Open a man page in Preview, nicely formatted
macman () {
    man -t "${1}" | open -f -a /Applications/Preview.app
}

# Quit application(s)
macquit () {
    for app in $*; do
        osascript -e 'quit app "'$app'"' 2>/dev/null
    done
}

# Re-launch application(s)
macrelaunch () {
    for app in $*; do
        osascript -e 'quit app "'$app'"' 2>/dev/null;
        sleep 2;
        open -a $app
    done
}

# Search with spotlight
macfind() {
    mdfind -live "$1"
}

# Mount a .dmg file; specify downloaded_file.dmg
macmount() {
    hdiutil mount "$1"
}

# Unmount a drive; Specify the drive name as it appears in Finder (no '.dmg')
macunmount() {
    for drive in $@; do
        hdiutil detach "/Volumes/$drive"
    done
}

# Serve current directory as web page on port 8080
macserve() {
    python -m SimpleHTTPServer 8080
}

macsleep() {
    osascript -e 'tell application "System Events" to sleep' > /dev/null 2>&1
}

macrestart() {
    sudo shutdown -r now
}

macshutdown() {
    sudo shutdown -h now
}

# Print almost any document as a PDF
# (if it has a correctly defined MIME type)
macprintpdf() {
    cupsfilter "$1" > "$1.pdf"
}

# Markdown syntax: insert 4 spaces at the start of each line
reddit() {
    pbpaste | sed 's/^/    /g' | pbcopy
}

# Encrypt clipboard contents
encclipboard() {
    pbpaste | gpg -ea | pbcopy
}

# Decrypt clipboard contents
decclipboard() {
    pbpaste | gpg -d | pbcopy
}

# Sign plaintext in clipboard. Useful for email messages, etc.
gpgsign() {
    pbpaste | gpg --clearsign | pbcopy
}
