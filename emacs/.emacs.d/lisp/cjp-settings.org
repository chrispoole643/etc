* Generic Emacs Configuration

System-agnostic.

** Melpa

#+BEGIN_SRC emacs-lisp
  (defvar cjp-required-packages '( ;; Common Lisp
                                  ac-slime
                                  redshank
                                  slime

                                  ;; LaTeX
                                  auctex
                                  reftex

                                  ;; C/C++
                                  c-eldoc

                                  ;; Clojure
                                  cider
                                  clojure-mode

                                  ;; Python
                                  ein
                                  elpy
                                  pydoc-info
                                  python-info
                                  pyvenv

                                  ;; Elisp
                                  elisp-slime-nav
                                  litable
                                  paredit

                                  ;; Scheme
                                  geiser

                                  ;; JavaScript
                                  js2-mode

                                  ;; Markdown
                                  markdown-mode
                                  markdown-mode+

                                  ;; Color themes
                                  color-theme
                                  monokai-theme
                                  solarized-theme
                                  tangotango-theme

                                  ;; Org
                                  org
                                  ox-reveal

                                  ;; HTML
                                  zencoding-mode

                                  ;; Helm
                                  helm
                                  ac-helm
                                  helm-dictionary
                                  helm-swoop

                                  ;; Miscellaneous
                                  ace-isearch
                                  ace-jump-mode
                                  auto-complete
                                  bookmark+
                                  cl-lib
                                  dictionary
                                  diminish
                                  dired+
                                  dired-details+
                                  edit-server
                                  expand-region
                                  flymake-cursor
                                  flx-ido
                                  framemove
                                  highlight-symbol
                                  htmlize
                                  iedit
                                  irfc
                                  magit
                                  multiple-cursors
                                  outline-magic
                                  persp-mode
                                  popwin
                                  powerline
                                  pretty-lambdada
                                  regex-tool
                                  restclient
                                  scpaste
                                  smex
                                  smooth-scrolling
                                  undo-tree
                                  visual-regexp
                                  w3m
                                  writeroom-mode
                                  yasnippet)
    "Required packages to be pulled from melpa.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-user-dir (cjp-emacs-structure-dir "elpa"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (setq package-enable-at-startup nil)
  (setq package-load-list '(all))
  (package-initialize)

  (when (or (not (file-exists-p package-user-dir))
         (< (length (directory-files package-user-dir)) 3))
    (unless package-archive-contents
      (package-refresh-contents))
    (mapc (lambda (package)
            (unless (package-installed-p package)
              (package-install package)))
          cjp-required-packages))

  (add-hook 'package-menu-mode-hook 'hl-line-mode)
#+END_SRC

** Requirements and libraries

These don't require their own section with other commands.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'generic-x)
  (require 'smallurl)
  (require 'multiple-cursors)
  (require 'iedit)
#+END_SRC

** Themes

Treat all themes as safe.

#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC

Make the fringe stand out from the background.

#+BEGIN_SRC emacs-lisp
  (setq solarized-distinct-fringe-background nil)
#+END_SRC

Don't change the font for some headings and titles.

#+BEGIN_SRC emacs-lisp
  (setq solarized-use-variable-pitch nil)
#+END_SRC

Make the modeline high contrast: makes it easy to notice the current buffer.

#+BEGIN_SRC emacs-lisp
  (setq solarized-high-contrast-mode-line t)
#+END_SRC

Draw the underline at the same place as the descent line: looks better.

#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (load-theme 'solarized-light t)
#+END_SRC

** ace-isearch

#+BEGIN_SRC emacs-lisp
  (require 'ace-isearch)
  (global-ace-isearch-mode t)

  (setq ace-isearch-input-idle-delay 0.4
        ace-isearch-input-length 10
        ace-isearch-function-from-isearch 'helm-swoop-from-isearch
        ace-isearch-submode 'ace-jump-char-mode
        ace-isearch-use-ace-jump 'printing-char)
#+END_SRC

** Helm

Good setup advice from https://tuhdo.github.io/helm-intro.html.

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq helm-split-window-in-side-p t     ; Open helm buffer inside current window
        helm-move-to-line-cycle-in-source t
        helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount 8         ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)
#+END_SRC

Fuzzy match where possible.

#+BEGIN_SRC emacs-lisp
  (setq helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match t
        helm-locate-fuzzy-match t
        helm-apropos-fuzzy-match t
        helm-lisp-fuzzy-completion t)
#+END_SRC

M-x doesn't work with same keys on all systems, so bind to C-x X-m too (And C-c for good
measure, in case your finger slips).

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x m") 'helm-M-x)
  (global-set-key (kbd "C-x C-m") 'helm-M-x)
  (global-set-key (kbd "C-c C-m") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-r") 'helm-recentf)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-d") 'helm-find-files) ; Replace ido-dired, too
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c C-f") 'helm-semantic-or-imenu)
  (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)
  (define-key helm-map (kbd "C-w") 'backward-kill-word)

  (define-key helm-map (kbd "M-n") 'helm-next-source)
  (define-key helm-map (kbd "M-p") 'helm-previous-source)
#+END_SRC

If the thing at point is a directory, go into the directory (as though hitting
<tab>). Else, open it. If the directory is `.' or `..', open in dired as usual.

#+BEGIN_SRC emacs-lisp
  (define-key helm-find-files-map (kbd "<return>")
    '(lambda () (interactive) (let ((sel (helm-get-selection)))
                                (if (and (file-directory-p sel)
                                         (not (helm-ff-dot-file-p sel)))
                                    (helm-execute-persistent-action)
                                  (helm-maybe-exit-minibuffer)))))
#+END_SRC

If the first two items in helm-find-files results are '.' and '..', and point would
usually be on the first one, move point down by two.

#+BEGIN_SRC emacs-lisp
  (add-hook 'helm-after-update-hook
            (lambda () (when (and (helm-file-completion-source-p)
                                  (not (helm-empty-source-p))
                                  (string-match "/\\.$" (helm-get-selection)))
                         (helm-next-line 2))))
#+END_SRC

Use thing at point when invoking helm-man-woman.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
#+END_SRC

*** helm-swoop

#+BEGIN_SRC emacs-lisp
  (require 'helm-swoop)
#+END_SRC

Result of a question I asked on reddit:
https://www.reddit.com/r/emacs/comments/334a7a/binding_to_trigger_helmswoop_multiline/cqj6xqd.

#+BEGIN_SRC emacs-lisp
  (defun helm-swoop-multiline-from-helm-swoop ()
    "Run `helm-swoop' over multiple lines, using the current
  helm-swoop pattern."
    (interactive)
    ;; run after exit the current minibuffer operation
    (run-with-timer
     0 nil (lambda () (helm-swoop :$query helm-swoop-pattern :$multiline 4)))
    (exit-minibuffer))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key isearch-mode-map (kbd "M-s") 'helm-swoop-from-isearch)
  (define-key helm-swoop-map (kbd "M-s") 'helm-multi-swoop-all-from-helm-swoop)
  (define-key helm-multi-swoop-map (kbd "M-s") 'helm-swoop-multiline-from-helm-swoop)
#+END_SRC

Move up and down like isearch.

#+BEGIN_SRC emacs-lisp
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq helm-swoop-use-line-number-face t)
#+END_SRC

** Semantic mode

#+BEGIN_SRC emacs-lisp
  (semantic-mode 1)
#+END_SRC

** Hl-line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Restclient

Don't change window focus to the output window when submitting a command.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "restclient-autoloads"
    '(add-hook 'restclient-mode-hook
               (lambda () (local-set-key (kbd "C-c C-c")
                                         '(lambda () (interactive)
                                            (restclient-http-send-current nil t))))))
#+END_SRC

** Writeroom

Defaults to 80. Allow a bit more if using in conjunction with org mode, where the
document might have indented lines.

#+BEGIN_SRC emacs-lisp
  (setq writeroom-width 100)
#+END_SRC

** Popwin

#+BEGIN_SRC emacs-lisp
  (require 'popwin)
  (popwin-mode 1)
#+END_SRC

** Persp-mode

#+BEGIN_SRC emacs-lisp
  ;; (with-eval-after-load "persp-mode-autoloads"
  ;;   ;; switch off animation of restoring window configuration
  ;;   (setq wg-morph-on nil)
  ;;   (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp
  (require 'diminish)
#+END_SRC

Alphanumeric unicode characters with circles around them are listed on
https://en.wikipedia.org/wiki/Enclosed_Alphanumerics
Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "auto-complete" '(diminish 'auto-complete-mode " Ⓐ"))
  (eval-after-load "abbrev" '(diminish 'abbrev-mode " Ⓐ"))
  (eval-after-load "anzu" '(diminish 'anzu-mode " Ⓐ"))
  (eval-after-load "elpy" '(diminish 'elpy-mode " Ⓔ"))
  (eval-after-load "simple" '(diminish 'auto-fill-function " Ⓕ"))
  (eval-after-load "helm" '(diminish 'helm-mode " Ⓗ"))
  (eval-after-load "magit" '(diminish 'magit-auto-revert-mode " Ⓜ"))
  (eval-after-load "org-indent" '(diminish 'org-indent-mode " Ⓞ"))
  (eval-after-load "paredit" '(diminish 'paredit-mode " Ⓟ"))
  (eval-after-load "undo-tree" '(diminish 'undo-tree-mode " Ⓤ"))
#+END_SRC

** Ein

#+BEGIN_SRC emacs-lisp
  (require 'ein)
  (setq ein:use-auto-complete t)
#+END_SRC

Or, to enable "superpack" (a little bit hacky improvements):

#+BEGIN_SRC emacs-lisp
  ;; (setq ein:use-auto-complete-superpack t)
#+END_SRC

** RFC

#+BEGIN_SRC emacs-lisp
  (require 'irfc)
  (setq irfc-assoc-mode t)
#+END_SRC

** Zencoding

#+BEGIN_SRC emacs-lisp
  (require 'zencoding-mode)
  (add-hook 'sgml-mode-hook 'zencoding-mode)
#+END_SRC

** Redshank

#+BEGIN_SRC emacs-lisp
  (require 'redshank-loader)
  (eval-after-load "redshank-loader"
    `(redshank-setup '(lisp-mode-hook
                       slime-repl-mode-hook) t))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
  (require 'powerline)
#+END_SRC

Same as powerline-default-theme, but move some of the items about a bit.

#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (powerline-selected-window-active))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face1 (if active 'powerline-active1 'powerline-inactive1))
                          (face2 (if active 'powerline-active2 'powerline-inactive2))
                          (separator-left (intern (format "powerline-%s-%s"
                                                          (powerline-current-separator)
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           (powerline-current-separator)
                                                           (cdr powerline-default-separator-dir))))
                          (height (when macosxp 20))
                          (lhs (list (powerline-raw "%*" nil 'l)
                                     (powerline-buffer-id nil 'l)
                                     (powerline-vc nil 'l)
                                     (when (and (boundp 'which-func-mode) which-func-mode)
                                       (powerline-raw which-func-format nil 'l))
                                     (powerline-raw " ")
                                     (funcall separator-left mode-line face1 height)
                                     (when (boundp 'erc-modified-channels-object)
                                       (powerline-raw erc-modified-channels-object face1 'l))
                                     (powerline-major-mode face1 'l)
                                     (powerline-process face1)
                                     (powerline-minor-modes face1 'l)
                                     (powerline-narrow face1 'l)
                                     (powerline-raw " " face1)
                                     (funcall separator-left face1 face2 height)
                                     (when (bound-and-true-p nyan-mode)
                                       (powerline-raw (list (nyan-create)) face2 'l))))
                          (rhs (list (powerline-raw global-mode-string face2 'r)
                                     (funcall separator-right face2 face1 height)
                                     (powerline-raw " " face1)
                                     (unless window-system
                                       (powerline-raw (char-to-string #xe0a1) face1 'l))
                                     (when powerline-display-buffer-size
                                       (powerline-buffer-size face1 'r))
                                     (when powerline-display-mule-info
                                       (powerline-raw mode-line-mule-info face1 'r))
                                     (powerline-raw "%4l" face1 'l)
                                     (powerline-raw ":" face1 'l)
                                     (powerline-raw "%3c" face1 'r)
                                     (funcall separator-right face1 mode-line height)
                                     (powerline-raw " ")
                                     (powerline-raw "%6p" nil 'r)
                                     (when powerline-display-hud
                                       (powerline-hud face2 face1)))))
                     (concat (powerline-render lhs)
                             (powerline-fill face2 (powerline-width rhs))
                             (powerline-render rhs))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator 'wave)
#+END_SRC

** Anzu

#+BEGIN_SRC emacs-lisp
  (global-anzu-mode t)
#+END_SRC

** CPerl mode

cperl-mode is preferred to perl-mode.

#+BEGIN_SRC emacs-lisp
  (defalias 'perl-mode 'cperl-mode)
#+END_SRC

** javadoc

#+BEGIN_SRC emacs-lisp
  ;; (require 'javadoc-help)

  ;; (add-hook 'java-mode-hook (lambda ()
  ;;                            (local-set-key (kbd "C-h C-h") 'javadoc-lookup)
  ;;                            (local-set-key (kbd "C-S-h C-S-h") 'javadoc-help)))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (setq magit-omit-untracked-dir-contents t)
  (setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

** Ace-jump

#+BEGIN_SRC emacs-lisp
  (require 'ace-jump-mode)
  (setq ace-jump-mode-case-sensitive-search nil)
#+END_SRC

** Auto-complete

#+BEGIN_SRC emacs-lisp
  (require 'auto-complete-config)

  (setq ac-comphist-file (cjp-emacs-structure-dir ".ac-comphist.dat")
        ac-fuzzy-enable t)

  (add-to-list 'ac-dictionary-directories
               (cjp-emacs-structure-dir "auto-complete/dict" "lisp"))
  (ac-config-default)
#+END_SRC

** IELM

Start ielm with AC, ElDoc, and Paredit. Make it inherit local variables from the buffer
it was invoked from.

#+BEGIN_SRC emacs-lisp
  (defvar ielm-invoked-from-buffer nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'ielm-mode-hook
            (lambda ()
              (setq ac-sources '(ac-source-functions
                                 ac-source-variables
                                 ac-source-features
                                 ac-source-symbols
                                 ac-source-words-in-same-mode-buffers))
              (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
              (auto-complete-mode 1)
              (eldoc-mode 1)
              (paredit-mode 1)
              (ielm-change-working-buffer ielm-invoked-from-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defadvice ielm (before change-working-buffer activate)
    (setq ielm-invoked-from-buffer (current-buffer)))
#+END_SRC

** w3m

#+BEGIN_SRC emacs-lisp
  ;; (setq browse-url-browser-function 'w3m-browse-url
  ;;       w3m-default-save-directory "~/Documents/inbox"
  ;;       w3m-use-tab nil
  ;;       w3m-use-tab-menubar nil
  ;;       w3m-key-binding "info")
#+END_SRC

** Bookmarks

#+BEGIN_SRC emacs-lisp
  (require 'bookmark+)
#+END_SRC

Choose a location of bookmarks file. Save bookmarks file every time I put a new bookmark
in the file (not just when Emacs quits).

#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file (cjp-emacs-structure-dir "bookmarks")
        bookmark-save-flag 1
        bmkp-bmenu-state-file (cjp-emacs-structure-dir ".emacs-bmk-bmenu-state.el")
        bmkp-bmenu-commands-file
        (cjp-emacs-structure-dir ".emacs-bmk-bmenu-commands.el"))
#+END_SRC

** DocView

When viewing pdf (for example), have it auto-revert. Useful if viewing a LaTeX document
with AUCTeX.

#+BEGIN_SRC emacs-lisp
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+END_SRC

Higher quality PDFs please.

#+BEGIN_SRC emacs-lisp
  (setq doc-view-resolution 300)
#+END_SRC

** Editing from Google Chrome


Chrome extension `Edit with Emacs` supplies edit-server.el, which has to be loaded for
Emacs to get the content from Chrome.

Further details: http://www.emacswiki.org/emacs/Edit_with_Emacs.

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (require 'edit-server)
    (setq edit-server-new-frame nil)
    (edit-server-start)

    ;; Use markdown mode, but still use C-c C-c to send back to Chrome
    (add-hook 'edit-server-start-hook
              (lambda ()
                (markdown-mode)
                (local-set-key (kbd "C-c C-c") 'edit-server-done))))
#+END_SRC

** Pretty Lambda


Turn 'lambda' into the Greek letter.

#+BEGIN_SRC emacs-lisp
  (require 'pretty-lambdada)
  ;; (setq cjp-lispy-modes '(lisp-mode-hook paredit-mode-hook))
  ;; (mapc (lambda (x) (add-hook x 'pretty-lambda)) cjp-lispy-modes)
  (add-hook 'lisp-interaction-mode-hook 'pretty-lambda)
  (add-hook 'emacs-lisp-mode-hook 'pretty-lambda)
  (add-hook 'lisp-mode-hook 'pretty-lambda)
  (add-hook 'slime-mode-hook 'pretty-lambda)
  (add-hook 'slime-mode-hook 'pretty-lambda)
  (add-hook 'slime-repl-mode-hook 'pretty-lambda)
  (add-hook 'scheme-mode-hook 'pretty-lambda)
  (add-hook 'inferior-scheme-mode-hook 'pretty-lambda)
#+END_SRC

** Flymake

Show error messages in minibuffer, not as a GUI menu.

#+BEGIN_SRC emacs-lisp
  (load-library "flymake-cursor")
#+END_SRC

Use pyflakes with flymake.

#+BEGIN_SRC emacs-lisp
  (when (load "flymake" t)
    (defun flymake-pyflakes-init ()
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "pyflakes" (list local-file))))

    (add-to-list 'flymake-allowed-file-name-masks
                 '("\\.py\\'" flymake-pyflakes-init)))
#+END_SRC

** Dictionary

#+BEGIN_SRC emacs-lisp
  (autoload 'dictionary-search "dictionary"
    "Ask for a word and search it in all dictionaries" t)
  (autoload 'dictionary-match-words "dictionary"
    "Ask for a word and search all matching words in the dictionaries" t)
  (autoload 'dictionary-lookup-definition "dictionary"
    "Unconditionally lookup the word at point." t)
  (autoload 'dictionary "dictionary"
    "Create a new dictionary buffer" t)

  (setq dictionary-default-strategy "re")
  (setq dictionary-use-single-buffer t)
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (require 'dired+)
  (require 'dired-details+)
#+END_SRC

Hide and show details (`ls -l` stuff) with '(' and ')'.

#+BEGIN_SRC emacs-lisp
  (setq dired-details-hidden-string ""
        dired-details-initially-hide nil
        ;; dired-omit-mode, ignore dotfiles
        dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

This is buffer-local variable.

#+BEGIN_SRC emacs-lisp
  (setq-default dired-omit-mode nil)
#+END_SRC

Make return key open files in another window, except if item at point is a directory, and
then open in the current window.

#+BEGIN_SRC emacs-lisp
  (define-key dired-mode-map (kbd "RET") (lambda ()
                                           (interactive)
                                           (if (cjp-dired-directoryp)
                                               (dired-find-file)
                                             (dired-find-file-other-window))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defadvice dired-details-toggle (after fit-dired-frame activate)
    "Resize dired buffer (horizontally) after toggling details."
    (fix-horizontal-size-to-buffer))
#+END_SRC

Don't show '..' since '^' does this; show human file sizes.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-Alh")
#+END_SRC

The default fonts don't look nice with Tango theme, at least to my eyes.

#+BEGIN_SRC emacs-lisp
  (setq diredp-compressed-file-suffix '((background dark)
                                        (:foreground "Red"))
        diredp-rare-priv '((background dark)
                           (:background "#FFFF00008080" :foreground "White")))
#+END_SRC

** CUA


Turn on for rectangle mode only.

#+BEGIN_SRC emacs-lisp
  (setq cua-enable-cua-keys nil)
  (setq cua-rectangle-mark-key (kbd "<C-M-return>"))
  (cua-mode 1)
#+END_SRC

** Smex

#+BEGIN_SRC emacs-lisp
  (require 'smex)
#+END_SRC

Start smex, saving into Emacs structure.

#+BEGIN_SRC emacs-lisp
  (setq smex-save-file (cjp-emacs-structure-dir ".smex-items"))
#+END_SRC

Smex updates its list of possible commands when run; don't let it.

#+BEGIN_SRC emacs-lisp
  (setq smex-auto-update t)
#+END_SRC

Update smex when Emacs has been idle for (default 60) seconds.

#+BEGIN_SRC emacs-lisp
  (smex-auto-update)
  (smex-initialize)
#+END_SRC

** Uniquify

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
#+END_SRC

Instead of <2> etc. after buffer name when opening multiple files with the same name,
Change it to "name" : "directory name".

#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator ":")
#+END_SRC

** Undo-tree

#+BEGIN_SRC emacs-lisp
  (require 'undo-tree)
  (global-undo-tree-mode 1)
#+END_SRC

** Winner / Windmove / FrameMove

Turn on winner mode to move back and forwards between window configurations with C-c left
and C-c right respectively.

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  (require 'framemove)
  (setq framemove-hook-into-windmove t)
#+END_SRC

** Slime

#+BEGIN_SRC emacs-lisp
  ;; (require 'slime)
#+END_SRC

Use sbcl

#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;(slime-setup '(slime-fancy))
#+END_SRC

auto-complete for slime.

#+BEGIN_SRC emacs-lisp
  (add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode))
#+END_SRC

** Recent files

From http://www.masteringemacs.org/articles/2011/01/27/
find-files-faster-recent-files-package

#+BEGIN_SRC emacs-lisp
  (require 'recentf)
#+END_SRC

Tramp mode messes this up, causing Emacs to IO block for a short time. (From
http://www.emacswiki.org/emacs/RecentFiles).

#+BEGIN_SRC emacs-lisp
  (setq recentf-auto-cleanup 'never)
#+END_SRC

50 files ought to be enough.

#+BEGIN_SRC emacs-lisp
  (setq ;; default is ~/.recentf
   recentf-save-file (cjp-emacs-structure-dir ".recentf")
   recentf-max-saved-items 1024
   recentf-exclude '("\.recentf" "\.ido\.last" "\.aux" "~$"))
#+END_SRC

Enable recent files mode.

#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC

Store my personal snippets in ~/emacs/snippets, still load the stock ones.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'yas/root-directory (cjp-emacs-structure-dir "contributed" "snippets"))
  (add-to-list 'yas/root-directory (cjp-emacs-structure-dir "personal" "snippets"))
#+END_SRC

Load snippets from all directories.

#+BEGIN_SRC emacs-lisp
  ;(mapc 'yas/load-directory yas/root-directory)
#+END_SRC

If there are multiple snippets to choose from, use ido by default in minibuffer.

#+BEGIN_SRC emacs-lisp
  (setq yas-prompt-functions '(yas/ido-prompt
                               yas/dropdown-prompt
                               yas/x-prompt
                               yas/completing-prompt
                               yas/no-prompt))
#+END_SRC

Yasnippet doesn't play well with ansi-term.

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook (lambda() (yas-minor-mode -1)))
#+END_SRC

** ElDoc

#+BEGIN_SRC emacs-lisp
  (require 'c-eldoc)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (mapc (lambda (x) (add-hook x 'turn-on-eldoc-mode))
        '(python-mode-hook
          inferior-python-mode
          emacs-lisp-mode-hook
          scheme-mode-hook
          inferior-scheme-mode-hook
          geiser-repl-mode-hook
          lisp-mode-hook
          slime-mode-hook
          slime-repl-mode-hook
          lisp-interaction-mode-hook
          c-mode-hook))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq c-eldoc-includes "-I./ -I../ -I/usr/include/ -I/usr/local/include/ ")
#+END_SRC

Make ElDoc aware of ParEdit's most used commands (ElDoc will automatically refresh the
minibuffer).

#+BEGIN_SRC emacs-lisp
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
  (setq eshell-directory-name (cjp-emacs-structure-dir ".eshell")
        eshell-scroll-to-bottom-on-input t)
#+END_SRC

** Markdown

Using kramdown from ruby gem.

#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode"
    "Major mode for editing Markdown files" t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq markdown-command "kramdown"
        ;; Use underscores for italics
        markdown-italic-underscore t
        markdown-indent-on-enter nil
        ;; Enable syntax highlighting (LaTeX)
        markdown-enable-math t)
#+END_SRC

Webgen uses markdown syntax in .page files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.page\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mark\\'" . markdown-mode))
#+END_SRC

** Outline minor mode

#+BEGIN_SRC emacs-lisp
  (require 'outline-magic)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'outline-minor-mode-hook
            (lambda ()
              (define-key outline-minor-mode-map (kbd "<tab>") 'outline-cycle)))
#+END_SRC

** Python and related modes

Using python.el, not python-mode.el. The latter doesn't seem to be able to send the
contents of a buffer to the interpreter easily, as python.el can (with C-c C-c).

Use python-mode with files with these extensions.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
  (add-to-list 'auto-mode-alist '("\\.pyx\\'" . python-mode))
#+END_SRC

Turn on auto-complete in python shells.

#+BEGIN_SRC emacs-lisp
  (add-hook 'inferior-python-mode-hook (lambda () (auto-complete-mode 1)))
#+END_SRC

Use python major mode if 'python' is in hashbang.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'interpreter-mode-alist '("python" . python-mode))
#+END_SRC

Check files for pep8 mistakes.

#+BEGIN_SRC emacs-lisp
  (autoload 'python-pep8 "python-pep8")
  (autoload 'pep8 "python-pep8")
#+END_SRC

displays "\" at the end of lines that wrap.

#+BEGIN_SRC emacs-lisp
  (setq longlines-show-hard-newlines t)
#+END_SRC

*** elpy

#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (when (executable-find "ipython")
    (elpy-use-ipython))
  (elpy-use-ipython)
#+END_SRC

** Info

#+BEGIN_SRC emacs-lisp
  (setq Info-default-directory-list
        (append (cjp-get-dir-structure-in "info")
                (cjp-get-dir-structure-in "elpa")
                Info-default-directory-list))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq Info-directory-list Info-default-directory-list)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (info-lookup-add-help
  ;;  :mode 'lisp-mode
  ;;  :regexp "[^][()'\" \t\n]+"
  ;;  :ignore-case t
  ;;  :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

  ;; (info-lookup-maybe-add-help
  ;;  :mode 'emacs-lisp-mode
  ;;  :regexp "[^][()`',\" \t\n]+"
  ;;  :doc-spec '(("(elisp)Index"          nil "^ -+ .*: " "\\( \\|$\\)")
  ;;              ;; Commands with key sequences appear in nodes as `foo' and
  ;;              ;; those without as `M-x foo'.
  ;;              ("(emacs)Command Index"  nil "`\\(M-x[ \t\n]+\\)?" "'")
  ;;              ;; Variables normally appear in nodes as just `foo'.
  ;;              ("(emacs)Variable Index" nil "`" "'")
  ;;              ;; Almost all functions, variables, etc appear in nodes as
  ;;              ;; " -- Function: foo" etc.  A small number of aliases and
  ;;              ;; symbols appear only as `foo', and will miss out on exact
  ;;              ;; positions.  Allowing `foo' would hit too many false matches
  ;;              ;; for things that should go to Function: etc, and those latter
  ;;              ;; are much more important.  Perhaps this could change if some
  ;;              ;; sort of fallback match scheme existed.
  ;;              ))
#+END_SRC

** Scheme

#+BEGIN_SRC emacs-lisp
  (require 'quack)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq cjp-scheme-program "mit-scheme")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name cjp-scheme-program)
#+END_SRC

Geiser is a minor mode built on scheme-mode, supporting racket (PLT-Scheme) and
guile. (See info doc.).

#+BEGIN_SRC emacs-lisp
  ;; (setq load-path (append (list (cjp-emacs-structure-dir "geiser/build/elisp"
  ;;                                                       "lisp"))
  ;;                        load-path))
  ;; (require 'geiser-install)
  ;; (setq geiser-active-implementations '(racket)
  ;;       geiser-repl-history-filename (cjp-emacs-structure-dir ".geiser-history")
  ;;       geiser-repl-autodoc-p nil
  ;;       geiser-mode-autodoc-p nil)
#+END_SRC

Shamelessly stolen from info-look.el, scheme-mode.

#+BEGIN_SRC emacs-lisp
  ;; (info-lookup-maybe-add-help
  ;;  :mode 'geiser-repl-mode
  ;;  :regexp "[^()`',\" \t\n]+"
  ;;  :ignore-case t
  ;;  ;; Aubrey Jaffer's rendition from <URL:ftp://ftp-swiss.ai.mit.edu/pub/scm>
  ;;  :doc-spec '(("(r5rs)Index" nil
  ;;               "^[ \t]+-+ [^:]+:[ \t]*" "\\b")))
#+END_SRC

*** Quack

#+BEGIN_SRC emacs-lisp
  (setq quack-default-program cjp-scheme-program
        quack-run-scheme-always-prompts-p nil)
#+END_SRC

http://synthcode.com/wiki/scheme-complete.

#+BEGIN_SRC emacs-lisp
  (autoload 'scheme-smart-complete "scheme-complete" nil t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (autoload 'scheme-get-current-symbol-info "scheme-complete" nil t)
  (add-hook 'scheme-mode-hook
            (lambda ()
              (make-local-variable 'eldoc-documentation-function)
              (setq eldoc-documentation-function 'scheme-get-current-symbol-info)))
#+END_SRC

** Paredit

Taken from http://www.emacswiki.org/emacs/ParEdit.

#+BEGIN_SRC emacs-lisp
  (autoload 'paredit-mode "paredit"
    "Minor mode for pseudo-structurally editing Lisp code." t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
  (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
  (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
  (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
  (add-hook 'geiser-repl-mode-hook      (lambda () (paredit-mode +1)))
  (add-hook 'inferior-scheme-mode-hook  (lambda () (paredit-mode +1)))
  (add-hook 'slime-mode-hook            (lambda () (paredit-mode +1)))
  (add-hook 'slime-repl-mode-hook       (lambda () (paredit-mode +1)))
#+END_SRC

Use C-w to backwards kill words, consistent with global custom settings. Also undefine
C-left and C-right, to use these with winner mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'paredit-mode-hook
            (lambda ()
              (local-set-key (kbd "C-w") 'paredit-backward-kill-word)
              (define-key paredit-mode-map (kbd "C-<left>") nil)
              (define-key paredit-mode-map (kbd "C-<right>") nil)))
#+END_SRC

Stop SLIME's REPL from grabbing DEL, which is annoying when backspacing over a '('.

#+BEGIN_SRC emacs-lisp
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
  (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
#+END_SRC

** js2

#+BEGIN_SRC emacs-lisp
  (autoload 'js2-mode "js2-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+END_SRC

** Tramp

Use SSH in TRAMP by default.

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

Don't make backup files when using TRAMP.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'backup-directory-alist
               (cons tramp-file-name-regexp nil))
#+END_SRC

Store information here (not default ~/.emacs.d/tramp).

#+BEGIN_SRC emacs-lisp
  (setq tramp-persistency-file-name (cjp-emacs-structure-dir ".tramp"))
#+END_SRC

** Comint

Add current directory to mode line of shell windows.

#+BEGIN_SRC emacs-lisp
  ;; (defun add-mode-line-dirtrack ()
  ;;  (add-to-list 'mode-line-buffer-identification
  ;;               '(:propertize (" " default-directory " ") face dired-directory)))
  ;; (add-hook 'shell-mode-hook 'add-mode-line-dirtrack)
#+END_SRC

Make sure passwords not echoed in shell.

#+BEGIN_SRC emacs-lisp
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'comint-mode-hook
            (lambda ()
              (define-key comint-mode-map (kbd "<up>") 'comint-previous-input)
              (define-key comint-mode-map (kbd "<down>") 'comint-next-input)))
#+END_SRC

** Calendar and Diary

#+BEGIN_SRC emacs-lisp
  (setq ;; Choose my custom diary file
   diary-file (cjp-emacs-structure-dir "diary")
   ;; Start Calendar on Monday
   calendar-week-start-day 1
   ;; European date format (DD/MM/YYYY)
   european-calendar-style 't)
#+END_SRC

** Abbrev

Operate on startup.

#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)
#+END_SRC

Save in specified file.

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name (cjp-emacs-structure-dir ".abbrev_defs")
        ;; Save abbrevs when files are saved
        save-abbrevs t
        ;; Recognise understores too
        dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
  (require 'org-gtd)
  (require 'ox-reveal)
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+END_SRC

Use better defaults when opening files.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "org" '(setq org-file-apps (if macosxp
                                                  org-file-apps-defaults-macosx
                                                org-file-apps-defaults-gnu)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-attach-directory (expand-file-name "~/Support/Attachments/"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("b" "PBC Entry" entry (file+headline "" "Inbox") "* PBC: %?"))
#+END_SRC

Structure templates
http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1-7-17

** AUCTeX

#+BEGIN_SRC emacs-lisp
  (require 'reftex)
#+END_SRC

These allow AUCTeX to parse TeX files automatically. Creates 'auto' directory with parse
info for each TeX file, got annoying so disabled for now.

#+BEGIN_SRC emacs-lisp
  ;; (setq TeX-auto-save t)

  (setq TeX-parse-self t
        ;; Use pdflatex as default mode in AuCTEX, always
        TeX-PDF-mode t
        ;; TeX-electric-sub-and-superscript nil
        )
#+END_SRC

Enable math mode and auto-fill when typing LaTeX, and RefTeX.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook (lambda () (TeX-source-correlate-mode 1)))
#+END_SRC

Use tex parser so that TeX commands aren't checked.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook (lambda () (setq ispell-parser 'tex)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq TeX-source-correlate-method 'synctex)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ;; Setup RefTeX with AUCTeX automatically
   reftex-plug-into-AUCTeX t
   ;; Use `-', not `:'
   reftex-section-prefixes '((0 . "part-")
                             (1 . "cha-")
                             (t . "sec-"))
   ;; Change citation format to natbib (\citet format)
   reftex-cite-format "\\citet[][]{%l}")
#+END_SRC

Highlight keywords from the natbib package.

#+BEGIN_SRC emacs-lisp
  (setq font-latex-match-reference-keywords
        '(("citet" "[{")))
#+END_SRC

Have AUCTeX ask which is master file for multi-document TeX.

#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC

** Ido & Flx

#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (require 'flx-ido)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-save-directory-list-file (cjp-emacs-structure-dir ".ido.last"))
  (ido-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-everywhere t
        ido-enable-flex-matching t
        ;; If a buffer name that doesn't exist is chosen, just make a new one without prompting
        ido-create-new-buffer 'always
        ;; Use flx faces
        ido-use-faces nil)
#+END_SRC

Ignore the .aux extensions that TeX programs create.

#+BEGIN_SRC emacs-lisp
  (setq completion-ignored-extensions
        (cons "*.aux" completion-ignored-extensions))
#+END_SRC

Order extensions by how I use them.

#+BEGIN_SRC emacs-lisp
  (setq ido-file-extensions-order '(".tex" ".txt" ".md" ".py" ".sh" ".el" ".xml" ".htm"))
#+END_SRC

Ignore files defined in variable completion-ignored-extensions.

#+BEGIN_SRC emacs-lisp
  (setq ido-ignore-extensions t)
#+END_SRC

Default keybinding is backspace key, but I use C-w in the non-Ido-mode minibuffers often,
so this is more conventient for muscle memory.

#+BEGIN_SRC emacs-lisp
  (define-key ido-file-completion-map (kbd "C-w") 'ido-delete-backward-updir)
#+END_SRC

Stops Ido searching for similar-named files if I use C-x C-s to create a new
file and buffer.

#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-work-directories-length -1)
#+END_SRC

Keep annoying buffers out of my face.

#+BEGIN_SRC emacs-lisp
  (setq ido-ignore-buffers (list (rx (or (and bos  " ")
                                         (and bos
                                              (or "*Completions*"
                                                  "*Shell Command Output*"
                                                  "*vc-diff*")
                                              eos)))))
#+END_SRC

Allow spaces when using ido-find-file.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ido-make-file-list-hook
            (lambda ()
              (define-key ido-file-dir-completion-map (kbd "SPC") 'self-insert-command)))
#+END_SRC

Use Ido for completing-read, such as describe-variable (C-h v) From
http://www.emacswiki.org/emacs/InteractivelyDoThings#toc13.

#+BEGIN_SRC emacs-lisp
  ;; (defvar ido-enable-replace-completing-read t
  ;;  "If t, use ido-completing-read instead of completing-read if possible.

  ;; Set it to nil using let in around-advice for functions where the
  ;; original completing-read is required.  For example, if a function
  ;; foo absolutely must use the original completing-read, define some
  ;; advice like this:

  ;;    (defadvice foo (around original-completing-read-only activate)
  ;;      (let (ido-enable-replace-completing-read) ad-do-it))")
#+END_SRC

Replace completing-read wherever possible, unless directed otherwise.

#+BEGIN_SRC emacs-lisp
  ;;(defadvice completing-read
  ;;  (around use-ido-when-possible activate)
  ;;  (if (or (not ido-enable-replace-completing-read) ; Manual override disable ido
  ;;          (and (boundp 'ido-cur-list)
  ;;               ido-cur-list)) ; Avoid infinite loop from ido calling this
  ;;      ad-do-it
  ;;    (let ((allcomp (all-completions "" collection predicate)))
  ;;      (if allcomp
  ;;          (setq ad-return-value
  ;;                (ido-completing-read prompt
  ;;                                     allcomp
  ;;                                     nil require-match initial-input hist def))
  ;;        ad-do-it))))
#+END_SRC

Don't guess filenames at all when I'm in dired; it's never what I want.  Also, turn off
ido-completing-read, as it messes up dired-do-rename, and probably other stuff too.

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'dired-mode-hook
  ;;          (lambda ()
  ;;             (set (make-local-variable 'ido-use-filename-at-point) nil)
  ;;             (set (make-local-variable 'ido-enable-replace-completing-read) nil)))
#+END_SRC

python.el doesn't like ido-completing-read either.

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'python-mode-hook
  ;;          (lambda ()
  ;;             (set (make-local-variable 'ido-enable-replace-completing-read) nil)))
#+END_SRC

** Aspell

Found from http://www.emacswiki.org/emacs/CocoAspell.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell"
        ispell-dictionary "english"
        ispell-dictionary-alist
        (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
                         ("-B" "-d" "english" "--dict-dir"
                          "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
                         nil iso-8859-1)))
          `((nil ,@default)
            ("english" ,@default))))
#+END_SRC

Save personal dictionary in emacs structure.

#+BEGIN_SRC emacs-lisp
  (setq ispell-personal-dictionary
        (cjp-emacs-structure-dir ".aspell-personal-dictionary"))
#+END_SRC

** ibuffer

Use ibuffer for my buffer menu (C-x C-b).

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+END_SRC

ibuffer defaults to opening files with ibuffer-find-file; I prefer ido.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ibuffer-load-hook (lambda ()
                                 (define-key ibuffer-mode-map
                                   (kbd "C-x C-f") 'ido-find-file)))
#+END_SRC

`* !' is what dired uses to clear all marks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ibuffer-load-hook (lambda ()
                                 (define-key ibuffer-mode-map
                                   (kbd "* !") 'ibuffer-unmark-all)))
#+END_SRC

** Unicode

#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC

** Miscellaneous

Turn off the menu bar, toolbar, and scrollbar.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+END_SRC

Save (a longer) minibuffer history.

#+BEGIN_SRC emacs-lisp
  (savehist-mode t)
  (setq history-length 1024)
#+END_SRC

A huge number forces windows to be split vertically, like C-x 3 does.

#+BEGIN_SRC emacs-lisp
  ;; (setq split-height-threshold 900)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

Enable narrowing.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

If using customize, save generated elisp here, not .emacs.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (cjp-emacs-structure-dir ".customize.el"))
#+END_SRC

If saving a .el file in my emacs structure, automatically byte compile it.  From
stackoverflow.com/questions/154097/whats-in-your-emacs/2277001#2277001.

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-save-hook
  ;;           (lambda ()
  ;;             (when (string-match
  ;;                    (concat "\.emacs\.d" ".*\.el$")
  ;;                    buffer-file-name)
  ;;               (byte-compile-file buffer-file-name))))
#+END_SRC

Put auto save files here.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-list-file-prefix (cjp-emacs-structure-dir ".auto-save-list/.saves-"))
#+END_SRC

Store tetris scores.

#+BEGIN_SRC emacs-lisp
  (setq tetris-score-file (cjp-emacs-structure-dir ".tetris-scores"))
#+END_SRC

Make scripts executable when saved by default (chmod +x).

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

These functions area disabled by default for new users. I want them!.

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

Mode to use for the initial scratch buffer.

#+BEGIN_SRC emacs-lisp
  ;; (setq-default initial-major-mode 'python-mode)
#+END_SRC

Word moving commands move point between CamelCaseWords
FIXME: causes ERC issue --- http://osdir.com/ml/bug-gnu-emacs-gnu/2014-05/msg00914.html.

#+BEGIN_SRC emacs-lisp
  ;; (global-subword-mode 1)
#+END_SRC

In Emacs 24.3.50+ (from git), modeline lists "," - stop this.

#+BEGIN_SRC emacs-lisp
  (let ((entry (assq 'subword-mode minor-mode-alist)))
    (when entry (setcdr entry '(nil))))
#+END_SRC

Don't always ask if I want to make a new file or buffer, just do it.

#+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC

I use this function a lot so create a shortcut. M-x bc invokes it.

#+BEGIN_SRC emacs-lisp
  (defalias 'bc 'emacs-lisp-byte-compile)
#+END_SRC

Auto-fill mode is useful in text mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Remove the "This buffer is for notes" text that shows at the top of the scratch buffer
when Emacs loads.

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

Store all backup files in one folder, not all over filesystem.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist (list (cons "." (cjp-emacs-structure-dir "backup/")))
        ;; Use version numbers for backups
        version-control t
        ;; Number of newest versions to keep
        kept-new-versions 2
        ;; Number of oldest versions to keep
        kept-old-versions 2
        ;; Ask to delete excess backup versions?
        delete-old-versions t
        ;; Copy linked files, don't rename
        backup-by-copying-when-linked t)
#+END_SRC

Store all autosave files in one folder, not all over filesystem.

#+BEGIN_SRC emacs-lisp
  (let ((save-dir (cjp-emacs-structure-dir "autosaves/")))
    (when (not (file-exists-p save-dir)) (make-directory save-dir t))
    (add-to-list 'auto-save-file-name-transforms
                 `(".*" ,save-dir t) t))
#+END_SRC

From emacs-fu.blogspot.com/2008/12/highlighting-todo-fixme-and-friends.html Highlights
comments like /* FIXME: do something */ in C-like (C, C++, Obj-C, etc.) languages.

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              (font-lock-add-keywords nil
                                      '(("\\<\\(FIXME\\|TODO\\|BUG\\):"
                                         1 font-lock-warning-face t)))))
#+END_SRC

Move mouse to top-right corner once it gets too close to cursor.  Move back once mouse
moved away.

#+BEGIN_SRC emacs-lisp
  (mouse-avoidance-mode 'exile)
#+END_SRC

Forces lines longer than buffer width to overlap in a nice way. I don't think I'm too
keen on it, so turned it off for the time being.

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 0)
#+END_SRC

Use nxml-mode for XML files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.xml\\'" . nxml-mode))
#+END_SRC

Modifies kill line and copy line (C-x C-k and M-w) in place. If something is selected,
copy/cut as usual. If nothing is selected, copy/cut the current line.

#+BEGIN_SRC emacs-lisp
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single
        line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+END_SRC

Replace yes/no by y/n.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Because I know where to find the help file.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Require C-x C-c prompt. I've closed too often by accident.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-c")
                  (lambda () (interactive)
                    (cond ((y-or-n-p "Quit? ")
                           (save-buffers-kill-emacs)))))
#+END_SRC

Always flash for parens.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Set mode of buffer automatically based on filename or other indications (see
set-auto-mode documentation), so can quickly make a temp. buffer (like *Scratch*) called
'test.txt' to make it open in text-mode, or 'test.js' for javascript-mode, etc.

#+BEGIN_SRC emacs-lisp
  (setq default-major-mode (lambda ()
                             (let ((buffer-file-name (or buffer-file-name (buffer-name))))
                               (set-auto-mode))))
#+END_SRC

Open new buffers (without files or filename extensions) in org-mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("" . org-mode) t)
#+END_SRC

Open log files in text mode, for now.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.log\\'" . text-mode))
#+END_SRC

Keep ispell word as M-s even when editing git commit logs.

#+BEGIN_SRC emacs-lisp
  (add-hook 'log-edit-mode-hook
            (lambda () (define-key log-edit-mode-map (kbd "M-s") 'ispell-word)))
#+END_SRC

I like this mode; seems to be on by default under emacs-snapshot on GNU/Linux systems.

#+BEGIN_SRC emacs-lisp
  (transient-mark-mode 1)
#+END_SRC

Make the compilation window appear smallish (not half of frame as default).

#+BEGIN_SRC emacs-lisp
  (setq compilation-window-height 10)
#+END_SRC

Set default path to my inbox.

#+BEGIN_SRC emacs-lisp
  ;; (setq default-directory "~/Documents/Inbox/")
#+END_SRC

True by default in Carbon Emacs. Set here for Aquamacs and other distros.

#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC

Mute annoying beep.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Stop cursor from blinking.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

Let emacsclient send stuff to existing Emacs process.

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (server-start))
#+END_SRC

Don't use tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Set auto-fill-mode to fill to column 89 (ideal for a 90 char width).

#+BEGIN_SRC emacs-lisp
  (setq default-fill-column 89)
#+END_SRC

Set tab key to two spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
#+END_SRC

Tab binary character in files interpreted as mod-4.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Show column number as well as line number.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

My prefered code indentation style.

#+BEGIN_SRC emacs-lisp
  (setq c-set-style "k&r")
#+END_SRC

When double-clicking a file to open in Emacs, make sure it opens in a new window in the
current frame; the default (nil) causes Emacs to create a new frame.

#+BEGIN_SRC emacs-lisp
  (setq display-buffer-reuse-frames t)
#+END_SRC

When lines wrap, `next-line' drops to the next real line, not the next
visual line.

#+BEGIN_SRC emacs-lisp
  (setq line-move-visual t)
#+END_SRC

From
masteringemacs.org/articles/2011/10/02/improving-performance-emacs-display-engine.

#+BEGIN_SRC emacs-lisp
  (setq redisplay-dont-pause t)
#+END_SRC

If I open a symlink file that is backed by a VC'd regular file, don't ask me if I want to
follow the link, just do it.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Use hl-line mode everywhere.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

Fix scrolling when using the mouse wheel or trackpad.

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil
        mouse-wheel-scroll-amount '(2 ((shift) . 5))
        scroll-conservatively 101)
#+END_SRC

Usually suspend-frame. Annoying.

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC
