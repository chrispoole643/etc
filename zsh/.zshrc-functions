# -*- mode: shell-script -*-
################################################################################
### zsh functions and aliases
### =========================
### 
################################################################################

################################################################################
## Suffix aliases
################################################################################

alias -s flv='open -a Movist.app'
alias -s avi='open -a Movist.app'
alias -s mp4='open -a Movist.app'
alias -s mov='open -a Movist.app'
alias -s m4v='open -a Movist.app'
alias -s pdf='open -a Preview.app'
alias -s jpg='open -a Preview.app'
alias -s png='open -a Preview.app'
alias -s htm='open -a Google\ Chrome.app'
alias -s html='open -a Google\ Chrome.app'
alias -s txt=e

################################################################################
## tmux
################################################################################

_starttmux () {
    name=${1:='main'}
    tmux new -d -s "$name" -n - \; neww -d -n - \; neww -d -n - \; attach
}

starttmux () {
    name=${1:='main'}
    # If we're not in tmux, and session exists
    if $(tmux has -t "$name" > /dev/null 2>&1) && [[ "$TMUX" == "" ]]; then
        tmux attach -d -t "$name"
    elif [[ "$TMUX" == "" ]]; then
        _starttmux "$name"
    fi
}

tc () {
    bufnum=${1:-'0'}
    tmux showb -b"$bufnum" | pbcopy
    if [[ "$TMUX" == "" ]]; then
        tmux attach
    fi
}

alias st=starttmux

################################################################################
## iPlayer
################################################################################

alias gi=get_iplayer
alias gig='get_iplayer -g'

################################################################################
## git
################################################################################

alias git-backup='cd ~/ && tar cjvf ~/Documents/Reference/Backups/git-backup-`date "+%Y%m%d%H%M"`.tbz .git'
alias gits='git st | less'

################################################################################
## gpg
################################################################################

_start-gpg-agent () {
    time=${1:-'1200'}                # 1200 seconds, 20 minutes
    eval $(gpg-agent -q --daemon --write-env-file "$HOME/.gpg-agent-info" \
        --default-cache-ttl "$time" --pinentry-program /usr/local/bin/pinentry \
        --max-cache-ttl 86400)      # 24 hours
    source "$HOME/.zshrc"           # Update environment variables
}

kill-gpg-agent () {
    printf "Killing gpg agents... "
    killall gpg-agent
    ps aux | grep -i gpg | grep -v grep
    printf "done.\n"
}

inform-emacs-gpg-agent () {
    agent_id=$(env | grep GPG_AGENT_INFO | awk -F '=' '{print $2}')
    emacsclient -e "(setenv \"GPG_AGENT_INFO\" \"$agent_id\")"
}

start-gpg-agent () {
    time=${1:-'20'}             # Request key cache time in minutes
    time_sec=$(($time * 60))
    _start-gpg-agent "$time_sec" && inform-emacs-gpg-agent
    starter_file="/tmp/gpg-agent-starter"
    sig_starter_file="$starter_file.gpg"
    gpg_key=${1:-"BAD246F9"}
    touch "$starter_file"
    if [[ -f "$sig_starter_file" ]]; then
        rm "$sig_starter_file"
    fi
    gpg -esr "$gpg_key" -o "$sig_starter_file" "$starter_file"
    if [[ -f "$starter_file" ]]; then
        rm "$starter_file"
    fi
    gpg -d -o "$starter_file" "$sig_starter_file"
    if [[ -f "$starter_file" ]]; then
        rm "$starter_file"
    fi
    if [[ -f "$sig_starter_file" ]]; then
        rm "$sig_starter_file"
    fi
}

################################################################################
## Generic
################################################################################

finder () {
    z $@ && open .
}

getfiles () {
    curl -SL "$2" | grep -Eoh "\"[^\"]+?\.$1\"" | uniq | \
        xargs -n1 -P2 curl -C - -LO
}

gen-cal-year () {
    year=${1:-$(date '+%Y')}
    pcal -b all -S -P a4 -t Times-Bold/24 -d Times-Bold/14 -F Monday ${year} \
        | ps2pdf - ${year}a.pdf &&
    pdfcrop --margins 10 ${year}a.pdf ${year}.pdf &&
    rm ${year}a.pdf
}

youtube-rss () {
    printf "http://www.youtube.com/rss/user/$1/videos.rss\n" | tee >(pbcopy)
}

alias kill-ssh-keys='ssh-add -D'

alias femacs='emacs -Q -nw'
alias bemacs='emacs -nw -f cjp-erc-bitlbee'

alias fget='get_flash_videos'
alias get='curl -C - -OL'

alias zz="source $HOME/.zshrc"

alias e='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient'
alias diffs='diff -s'
alias ll="ls -lh"
alias la="ls -a1"
alias lsd='gls -1 -X --group-directories-first'
alias div='dirs -v'
alias getip='curl ifconfig.me'

# View current wording directory in Emacs Dired window
alias cde='emacsclient -e "(dired \"$(pwd)\")" && osascript -e "tell application \"Emacs\" to activate" 2>/dev/null'

# Return a list of all sub-directories (recursively), together with how many
# files each one contains. Sort to put directories with the most files at the
# bottom
alias filesindirs='find . -type d | while read dir; do; echo "$dir" : $(find "$dir" -type f | wc -l); done | sort -k2 -t ":" -n'

if [[ -x `which guuencode` ]]; then
    alias guuencode=guuencode
else
    alias guuencode=uuencode
fi

# Find options in man pages quickly
gman () {
    3=${3:-'0'}
    man -- $1 | col -bx | if [[ $2 == "" ]]; then
        grep -Em2 -- "^ +$1"
    else
        if [[ $3 -lt 0 ]]; then
            grep -C${3#-} -- $2
        else
            grep -A$3 -- $2
        fi | more
    fi
}

start_delay_server () {
    delay-sites -f ~/.delayed-sites -d ${1:-'30'}
}

# Format 'show SxxExx.avi' filename nicely
nice_titles () {
    if [[ -f ".DS_Store" ]]; then
        rm .DS_Store
    fi
    rename 's/\.(?!avi|mkv)/ /g' "$@"
    rename 's/^(.+)([Ss]\d{1,2}[Ee]\d{1,2}(-\d{1,2})?)(.+\.(avi|mkv))/$2 $1 $4/' "$@"
    rename 's/ +/ /g' "$@"
    rename -f 's/s(\d{1,2})e(\d{1,2})/S$1E$2/' "$@"
}

# Move files in directory $1 up a level, remove empty directory
move_up () {
    if [[ -d "$1" ]]; then
        cd "$1" && mv * ../ && cd ../
        find . -type d -empty -print0 | xargs -0I'{}' rm -r {}
    fi
}

# Generates base64 random password (remove -m flag for other symbols)
ranpwd () {
    cat /dev/random | guuencode -m - | head -n 2 | tail -n 1
}

# Symmetric encryption
cencrypt () {
    for i in "$@"; do
        if [ -d "$i" ]; then
            tar cf - "$i" | gpg -c -z9 --cipher-algo AES256 --compress-algo bzip2 \
                -o ${i%/##}.tar.gpg && ls -lh "$i"* && srm -rmi ${i%/##}
        elif [ -f "$i" ]; then
            gpg -c -z9 --cipher-algo AES256 --compress-algo bzip2 \
                -o ${i}.gpg "$i" && ls -lh "$i"* && srm -mi "$i"
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Encrypt file or folder to myself, tarring folders
encrypt () {
    for i in "$@"; do
        if [ -d "$i" ]; then
            # Strip following '/'
            tar cf - "$i" | gpg -er BAD246F9 -z9 -o ${i%/##}.tar.gpg && du -hs ${i%/##}* && srm -rmi ${i%/##}
        elif [ -f "$i" ]; then
            gpg -er BAD246F9 -z9 -o ${i}.gpg "$i" && ls -lh "$i"* && srm -mi "$i"
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Encrypt and sign file or folder to myself, tarring folders
sencrypt () {
    for i in "$@"; do
        if [ -d "$i" ]; then
            # Strip following '/'
            tar cf - "$i" | gpg -esr BAD246F9 -z9 -o ${i%/##}.tar.gpg && du -hs ${i%/##}* && srm -rmi ${i%/##}
        elif [ -f "$i" ]; then
            gpg -esr BAD246F9 -z9 -o ${i}.gpg "$i" && ls -lh "$i"* && srm -mi "$i"
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Decrypts file or folder that has been encrypted with previous method
decrypt () {
    for i in "$@"; do
        if [[ ${i#*.} = "tar.gpg" ]]; then
            gpg -d "$i" | tar xf - && du -hs ${i%%.*}* && rm -i "$i"
        elif [ -f "$i" ]; then
            gpg -o ${i%.gpg} -d "$i" && ls -lh ${i%.gpg}* && rm -i "$i" # Output without .gpg extension
        else
            echo "$i" is not a valid file or directory.
        fi
    done
}

# Useful if md5 program not available. Easier syntax for sha1
omd5 () {
    echo -n "$1" | openssl dgst -md5
}

osha1 () {
    echo -n "$1" | openssl dgst -sha1
}

# Unzip to a directory
unzipdir () {
    unzip -d ${1%.zip} "$1"
}

# Handy!
xtr () {
    for file in "$@"; do
        if [ -f "$file" ] ; then
            case "$file" in
                *.tar.bz2)   tar xvjf "$file"                            ;;
                *.tar.gz)    tar xvzf "$file"                            ;;
                *.tar.xz)    unxz -c "$file" | tar xvf -                 ;;
                *.xz)        unxz "$file"                                ;;
                *.bz2)       bunzip2 "$file"                             ;;
                *.rar)       rar x "$file"                               ;;
                *.gz)        gunzip "$file"                              ;;
                *.tar)       tar xvf "$file"                             ;;
                *.tbz2)      tar xvjf "$file"                            ;;
                *.tbz)       tar xvjf "$file"                            ;;
                *.tgz)       tar xvzf "$file"                            ;;
                *.zip)       unzipdir "$file"                            ;;
                *.Z)         uncompress "$file"                          ;;
                *.7z)        7z x "$file"                                ;;
                *.gpg)       decrypt "$file"                             ;;
                *)           echo "don't know how to extract '$file'..." ;;
            esac
        else
            echo "'$file' is not a valid file!"
        fi
    done
}

bz22xz () {
    for file in "$@"; do
        if [ -f "$file" ] ; then
            bunzip2 -c "$file" | xz -c -9 > ${file%.bz2}.xz
        else
            echo "'$file' is not a valid file!"
        fi
    done
}

xzdirs () {
    for dir in "$@"; do
        if [[ -d "$dir" ]]; then
            tar cvf - "$dir" | xz -9 > ${dir%/}.tar.xz
        else
            echo "'$dir' is not a valid directory!"
        fi
    done
}
